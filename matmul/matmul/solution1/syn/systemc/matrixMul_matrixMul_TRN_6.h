// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _matrixMul_matrixMul_TRN_6_HH_
#define _matrixMul_matrixMul_TRN_6_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct matrixMul_matrixMul_TRN_6 : public sc_module {
    // Port declarations 39
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > blockDim_x;
    sc_in< sc_lv<32> > blockDim_y;
    sc_in< sc_lv<32> > blockDim_z;
    sc_out< sc_lv<8> > As_address0;
    sc_out< sc_logic > As_ce0;
    sc_out< sc_logic > As_we0;
    sc_out< sc_lv<32> > As_d0;
    sc_out< sc_logic > A_req_din;
    sc_in< sc_logic > A_req_full_n;
    sc_out< sc_logic > A_req_write;
    sc_in< sc_logic > A_rsp_empty_n;
    sc_out< sc_logic > A_rsp_read;
    sc_out< sc_lv<32> > A_address;
    sc_in< sc_lv<32> > A_datain;
    sc_out< sc_lv<32> > A_dataout;
    sc_out< sc_lv<32> > A_size;
    sc_in< sc_lv<32> > a_r;
    sc_in< sc_lv<32> > wA;
    sc_out< sc_lv<8> > Bs_address0;
    sc_out< sc_logic > Bs_ce0;
    sc_out< sc_logic > Bs_we0;
    sc_out< sc_lv<32> > Bs_d0;
    sc_out< sc_logic > B_req_din;
    sc_in< sc_logic > B_req_full_n;
    sc_out< sc_logic > B_req_write;
    sc_in< sc_logic > B_rsp_empty_n;
    sc_out< sc_logic > B_rsp_read;
    sc_out< sc_lv<32> > B_address;
    sc_in< sc_lv<32> > B_datain;
    sc_out< sc_lv<32> > B_dataout;
    sc_out< sc_lv<32> > B_size;
    sc_in< sc_lv<32> > b_r;
    sc_in< sc_lv<32> > wB;


    // Module declarations
    matrixMul_matrixMul_TRN_6(sc_module_name name);
    SC_HAS_PROCESS(matrixMul_matrixMul_TRN_6);

    ~matrixMul_matrixMul_TRN_6();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_24;
    sc_signal< sc_lv<32> > threadIdx_z_fu_196_p2;
    sc_signal< sc_lv<32> > threadIdx_z_reg_329;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_100;
    sc_signal< sc_lv<32> > next_mul1_fu_202_p2;
    sc_signal< sc_lv<32> > next_mul1_reg_334;
    sc_signal< sc_logic > ap_sig_cseq_ST_st3_fsm_2;
    sc_signal< bool > ap_sig_109;
    sc_signal< sc_lv<32> > next_mul_fu_207_p2;
    sc_signal< sc_lv<32> > next_mul_reg_339;
    sc_signal< sc_lv<32> > tmp_1_fu_217_p2;
    sc_signal< sc_lv<32> > tmp_1_reg_347;
    sc_signal< sc_lv<6> > tmp_fu_223_p1;
    sc_signal< sc_lv<6> > tmp_reg_352;
    sc_signal< sc_lv<1> > exitcond1_fu_212_p2;
    sc_signal< sc_lv<32> > tmp_7_fu_227_p2;
    sc_signal< sc_lv<32> > tmp_7_reg_357;
    sc_signal< sc_lv<32> > tmp_2_fu_232_p2;
    sc_signal< sc_lv<32> > tmp_2_reg_362;
    sc_signal< sc_logic > ap_sig_cseq_ST_st4_fsm_3;
    sc_signal< bool > ap_sig_132;
    sc_signal< sc_lv<10> > tmp_5_cast_fu_257_p3;
    sc_signal< sc_lv<10> > tmp_5_cast_reg_379;
    sc_signal< sc_logic > ap_sig_cseq_ST_st5_fsm_4;
    sc_signal< bool > ap_sig_143;
    sc_signal< sc_lv<32> > threadIdx_x_fu_269_p2;
    sc_signal< sc_lv<32> > threadIdx_x_reg_387;
    sc_signal< sc_logic > ap_sig_cseq_ST_st6_fsm_5;
    sc_signal< bool > ap_sig_152;
    sc_signal< sc_lv<1> > exitcond_fu_264_p2;
    sc_signal< bool > ap_sig_161;
    sc_signal< sc_lv<32> > A_addr_read_reg_392;
    sc_signal< sc_lv<10> > tmp_5_fu_279_p2;
    sc_signal< sc_lv<10> > tmp_5_reg_397;
    sc_signal< sc_lv<32> > B_addr_read_reg_402;
    sc_signal< sc_lv<32> > threadIdx_2_reg_136;
    sc_signal< sc_lv<32> > threadIdx_y_reg_147;
    sc_signal< sc_lv<1> > exitcond2_fu_191_p2;
    sc_signal< sc_lv<32> > phi_mul_reg_158;
    sc_signal< sc_lv<32> > phi_mul1_reg_169;
    sc_signal< sc_lv<32> > threadIdx_reg_180;
    sc_signal< sc_logic > ap_sig_cseq_ST_st7_fsm_6;
    sc_signal< bool > ap_sig_193;
    sc_signal< sc_lv<64> > tmp_14_cast_fu_284_p1;
    sc_signal< sc_lv<64> > tmp_s_fu_237_p1;
    sc_signal< sc_lv<64> > tmp_3_fu_240_p1;
    sc_signal< sc_lv<10> > tmp_4_fu_275_p1;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_st1_fsm_0;
    static const sc_lv<7> ap_ST_st2_fsm_1;
    static const sc_lv<7> ap_ST_st3_fsm_2;
    static const sc_lv<7> ap_ST_st4_fsm_3;
    static const sc_lv<7> ap_ST_st5_fsm_4;
    static const sc_lv<7> ap_ST_st6_fsm_5;
    static const sc_lv<7> ap_ST_st7_fsm_6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<4> ap_const_lv4_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_A_address();
    void thread_A_dataout();
    void thread_A_req_din();
    void thread_A_req_write();
    void thread_A_rsp_read();
    void thread_A_size();
    void thread_As_address0();
    void thread_As_ce0();
    void thread_As_d0();
    void thread_As_we0();
    void thread_B_address();
    void thread_B_dataout();
    void thread_B_req_din();
    void thread_B_req_write();
    void thread_B_rsp_read();
    void thread_B_size();
    void thread_Bs_address0();
    void thread_Bs_ce0();
    void thread_Bs_d0();
    void thread_Bs_we0();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_100();
    void thread_ap_sig_109();
    void thread_ap_sig_132();
    void thread_ap_sig_143();
    void thread_ap_sig_152();
    void thread_ap_sig_161();
    void thread_ap_sig_193();
    void thread_ap_sig_24();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st3_fsm_2();
    void thread_ap_sig_cseq_ST_st4_fsm_3();
    void thread_ap_sig_cseq_ST_st5_fsm_4();
    void thread_ap_sig_cseq_ST_st6_fsm_5();
    void thread_ap_sig_cseq_ST_st7_fsm_6();
    void thread_exitcond1_fu_212_p2();
    void thread_exitcond2_fu_191_p2();
    void thread_exitcond_fu_264_p2();
    void thread_next_mul1_fu_202_p2();
    void thread_next_mul_fu_207_p2();
    void thread_threadIdx_x_fu_269_p2();
    void thread_threadIdx_z_fu_196_p2();
    void thread_tmp_14_cast_fu_284_p1();
    void thread_tmp_1_fu_217_p2();
    void thread_tmp_2_fu_232_p2();
    void thread_tmp_3_fu_240_p1();
    void thread_tmp_4_fu_275_p1();
    void thread_tmp_5_cast_fu_257_p3();
    void thread_tmp_5_fu_279_p2();
    void thread_tmp_7_fu_227_p2();
    void thread_tmp_fu_223_p1();
    void thread_tmp_s_fu_237_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
