// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _matrixMul_matrixMul_TRN_10_HH_
#define _matrixMul_matrixMul_TRN_10_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct matrixMul_matrixMul_TRN_10 : public sc_module {
    // Port declarations 23
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > blockDim_x;
    sc_in< sc_lv<32> > blockDim_y;
    sc_in< sc_lv<32> > blockDim_z;
    sc_out< sc_logic > C_req_din;
    sc_in< sc_logic > C_req_full_n;
    sc_out< sc_logic > C_req_write;
    sc_in< sc_logic > C_rsp_empty_n;
    sc_out< sc_logic > C_rsp_read;
    sc_out< sc_lv<32> > C_address;
    sc_in< sc_lv<32> > C_datain;
    sc_out< sc_lv<32> > C_dataout;
    sc_out< sc_lv<32> > C_size;
    sc_out< sc_lv<8> > Csub_block_address0;
    sc_out< sc_logic > Csub_block_ce0;
    sc_in< sc_lv<32> > Csub_block_q0;
    sc_in< sc_lv<32> > c_r;
    sc_in< sc_lv<32> > wB;


    // Module declarations
    matrixMul_matrixMul_TRN_10(sc_module_name name);
    SC_HAS_PROCESS(matrixMul_matrixMul_TRN_10);

    ~matrixMul_matrixMul_TRN_10();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_23;
    sc_signal< sc_lv<32> > threadIdx_z_fu_136_p2;
    sc_signal< sc_lv<32> > threadIdx_z_reg_245;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_72;
    sc_signal< sc_lv<32> > next_mul_fu_142_p2;
    sc_signal< sc_lv<32> > next_mul_reg_250;
    sc_signal< sc_logic > ap_sig_cseq_ST_st3_fsm_2;
    sc_signal< bool > ap_sig_81;
    sc_signal< sc_lv<32> > tmp_6_fu_152_p2;
    sc_signal< sc_lv<32> > tmp_6_reg_258;
    sc_signal< sc_lv<10> > tmp_17_cast_fu_162_p3;
    sc_signal< sc_lv<10> > tmp_17_cast_reg_263;
    sc_signal< sc_lv<1> > exitcond1_fu_147_p2;
    sc_signal< sc_lv<32> > C_addr_reg_268;
    sc_signal< sc_lv<32> > threadIdx_x_fu_190_p2;
    sc_signal< sc_lv<32> > threadIdx_x_reg_276;
    sc_signal< sc_logic > ap_sig_cseq_ST_st4_fsm_3;
    sc_signal< bool > ap_sig_100;
    sc_signal< sc_lv<1> > exitcond_fu_185_p2;
    sc_signal< sc_lv<1> > is_0iter_fu_210_p2;
    sc_signal< sc_lv<1> > is_0iter_reg_286;
    sc_signal< sc_lv<32> > Csub_block_load_reg_290;
    sc_signal< sc_logic > ap_sig_cseq_ST_st5_fsm_4;
    sc_signal< bool > ap_sig_115;
    sc_signal< sc_lv<32> > threadIdx_2_reg_87;
    sc_signal< sc_lv<32> > threadIdx_y_reg_98;
    sc_signal< sc_lv<1> > exitcond2_fu_131_p2;
    sc_signal< sc_lv<32> > phi_mul_reg_109;
    sc_signal< sc_lv<32> > threadIdx_reg_120;
    sc_signal< sc_logic > ap_sig_cseq_ST_st6_fsm_5;
    sc_signal< bool > ap_sig_137;
    sc_signal< sc_lv<64> > tmp_19_cast_fu_205_p1;
    sc_signal< sc_lv<64> > tmp_7_fu_175_p1;
    sc_signal< sc_lv<6> > tmp_fu_158_p1;
    sc_signal< sc_lv<32> > tmp_s_fu_170_p2;
    sc_signal< sc_lv<10> > tmp_5_fu_196_p1;
    sc_signal< sc_lv<10> > tmp_8_fu_200_p2;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_st1_fsm_0;
    static const sc_lv<6> ap_ST_st2_fsm_1;
    static const sc_lv<6> ap_ST_st3_fsm_2;
    static const sc_lv<6> ap_ST_st4_fsm_3;
    static const sc_lv<6> ap_ST_st5_fsm_4;
    static const sc_lv<6> ap_ST_st6_fsm_5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<4> ap_const_lv4_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_C_address();
    void thread_C_dataout();
    void thread_C_req_din();
    void thread_C_req_write();
    void thread_C_rsp_read();
    void thread_C_size();
    void thread_Csub_block_address0();
    void thread_Csub_block_ce0();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_100();
    void thread_ap_sig_115();
    void thread_ap_sig_137();
    void thread_ap_sig_23();
    void thread_ap_sig_72();
    void thread_ap_sig_81();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st3_fsm_2();
    void thread_ap_sig_cseq_ST_st4_fsm_3();
    void thread_ap_sig_cseq_ST_st5_fsm_4();
    void thread_ap_sig_cseq_ST_st6_fsm_5();
    void thread_exitcond1_fu_147_p2();
    void thread_exitcond2_fu_131_p2();
    void thread_exitcond_fu_185_p2();
    void thread_is_0iter_fu_210_p2();
    void thread_next_mul_fu_142_p2();
    void thread_threadIdx_x_fu_190_p2();
    void thread_threadIdx_z_fu_136_p2();
    void thread_tmp_17_cast_fu_162_p3();
    void thread_tmp_19_cast_fu_205_p1();
    void thread_tmp_5_fu_196_p1();
    void thread_tmp_6_fu_152_p2();
    void thread_tmp_7_fu_175_p1();
    void thread_tmp_8_fu_200_p2();
    void thread_tmp_fu_158_p1();
    void thread_tmp_s_fu_170_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
