// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "matrixMul_matrixMul_TRN_6.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic matrixMul_matrixMul_TRN_6::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic matrixMul_matrixMul_TRN_6::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> matrixMul_matrixMul_TRN_6::ap_ST_st1_fsm_0 = "1";
const sc_lv<7> matrixMul_matrixMul_TRN_6::ap_ST_st2_fsm_1 = "10";
const sc_lv<7> matrixMul_matrixMul_TRN_6::ap_ST_st3_fsm_2 = "100";
const sc_lv<7> matrixMul_matrixMul_TRN_6::ap_ST_st4_fsm_3 = "1000";
const sc_lv<7> matrixMul_matrixMul_TRN_6::ap_ST_st5_fsm_4 = "10000";
const sc_lv<7> matrixMul_matrixMul_TRN_6::ap_ST_st6_fsm_5 = "100000";
const sc_lv<7> matrixMul_matrixMul_TRN_6::ap_ST_st7_fsm_6 = "1000000";
const sc_lv<32> matrixMul_matrixMul_TRN_6::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> matrixMul_matrixMul_TRN_6::ap_const_lv1_1 = "1";
const sc_lv<32> matrixMul_matrixMul_TRN_6::ap_const_lv32_1 = "1";
const sc_lv<32> matrixMul_matrixMul_TRN_6::ap_const_lv32_2 = "10";
const sc_lv<1> matrixMul_matrixMul_TRN_6::ap_const_lv1_0 = "0";
const sc_lv<32> matrixMul_matrixMul_TRN_6::ap_const_lv32_3 = "11";
const sc_lv<32> matrixMul_matrixMul_TRN_6::ap_const_lv32_4 = "100";
const sc_lv<32> matrixMul_matrixMul_TRN_6::ap_const_lv32_5 = "101";
const sc_lv<32> matrixMul_matrixMul_TRN_6::ap_const_lv32_6 = "110";
const sc_lv<4> matrixMul_matrixMul_TRN_6::ap_const_lv4_0 = "0000";

matrixMul_matrixMul_TRN_6::matrixMul_matrixMul_TRN_6(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_A_address);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( tmp_s_fu_237_p1 );

    SC_METHOD(thread_A_dataout);

    SC_METHOD(thread_A_req_din);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_A_req_write);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_A_rsp_read);
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );
    sensitive << ( exitcond_fu_264_p2 );
    sensitive << ( ap_sig_161 );

    SC_METHOD(thread_A_size);
    sensitive << ( blockDim_x );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_As_address0);
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );
    sensitive << ( tmp_14_cast_fu_284_p1 );

    SC_METHOD(thread_As_ce0);
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );

    SC_METHOD(thread_As_d0);
    sensitive << ( A_addr_read_reg_392 );
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );

    SC_METHOD(thread_As_we0);
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );

    SC_METHOD(thread_B_address);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );
    sensitive << ( tmp_3_fu_240_p1 );

    SC_METHOD(thread_B_dataout);

    SC_METHOD(thread_B_req_din);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_B_req_write);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_B_rsp_read);
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );
    sensitive << ( exitcond_fu_264_p2 );
    sensitive << ( ap_sig_161 );

    SC_METHOD(thread_B_size);
    sensitive << ( blockDim_x );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_Bs_address0);
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );
    sensitive << ( tmp_14_cast_fu_284_p1 );

    SC_METHOD(thread_Bs_ce0);
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );

    SC_METHOD(thread_Bs_d0);
    sensitive << ( B_addr_read_reg_402 );
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );

    SC_METHOD(thread_Bs_we0);
    sensitive << ( ap_sig_cseq_ST_st7_fsm_6 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond2_fu_191_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( exitcond2_fu_191_p2 );

    SC_METHOD(thread_ap_sig_100);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_109);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_132);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_143);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_152);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_161);
    sensitive << ( A_rsp_empty_n );
    sensitive << ( B_rsp_empty_n );
    sensitive << ( exitcond_fu_264_p2 );

    SC_METHOD(thread_ap_sig_193);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_24 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_100 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_109 );

    SC_METHOD(thread_ap_sig_cseq_ST_st4_fsm_3);
    sensitive << ( ap_sig_132 );

    SC_METHOD(thread_ap_sig_cseq_ST_st5_fsm_4);
    sensitive << ( ap_sig_143 );

    SC_METHOD(thread_ap_sig_cseq_ST_st6_fsm_5);
    sensitive << ( ap_sig_152 );

    SC_METHOD(thread_ap_sig_cseq_ST_st7_fsm_6);
    sensitive << ( ap_sig_193 );

    SC_METHOD(thread_exitcond1_fu_212_p2);
    sensitive << ( blockDim_y );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( threadIdx_y_reg_147 );

    SC_METHOD(thread_exitcond2_fu_191_p2);
    sensitive << ( blockDim_z );
    sensitive << ( ap_sig_cseq_ST_st2_fsm_1 );
    sensitive << ( threadIdx_2_reg_136 );

    SC_METHOD(thread_exitcond_fu_264_p2);
    sensitive << ( blockDim_x );
    sensitive << ( ap_sig_cseq_ST_st6_fsm_5 );
    sensitive << ( ap_sig_161 );
    sensitive << ( threadIdx_reg_180 );

    SC_METHOD(thread_next_mul1_fu_202_p2);
    sensitive << ( wB );
    sensitive << ( phi_mul1_reg_169 );

    SC_METHOD(thread_next_mul_fu_207_p2);
    sensitive << ( wA );
    sensitive << ( phi_mul_reg_158 );

    SC_METHOD(thread_threadIdx_x_fu_269_p2);
    sensitive << ( threadIdx_reg_180 );

    SC_METHOD(thread_threadIdx_z_fu_196_p2);
    sensitive << ( threadIdx_2_reg_136 );

    SC_METHOD(thread_tmp_14_cast_fu_284_p1);
    sensitive << ( tmp_5_reg_397 );

    SC_METHOD(thread_tmp_1_fu_217_p2);
    sensitive << ( threadIdx_y_reg_147 );

    SC_METHOD(thread_tmp_2_fu_232_p2);
    sensitive << ( b_r );
    sensitive << ( phi_mul1_reg_169 );

    SC_METHOD(thread_tmp_3_fu_240_p1);
    sensitive << ( tmp_2_reg_362 );

    SC_METHOD(thread_tmp_4_fu_275_p1);
    sensitive << ( threadIdx_reg_180 );

    SC_METHOD(thread_tmp_5_cast_fu_257_p3);
    sensitive << ( tmp_reg_352 );

    SC_METHOD(thread_tmp_5_fu_279_p2);
    sensitive << ( tmp_5_cast_reg_379 );
    sensitive << ( tmp_4_fu_275_p1 );

    SC_METHOD(thread_tmp_7_fu_227_p2);
    sensitive << ( a_r );
    sensitive << ( phi_mul_reg_158 );

    SC_METHOD(thread_tmp_fu_223_p1);
    sensitive << ( threadIdx_y_reg_147 );

    SC_METHOD(thread_tmp_s_fu_237_p1);
    sensitive << ( tmp_7_reg_357 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond1_fu_212_p2 );
    sensitive << ( exitcond_fu_264_p2 );
    sensitive << ( ap_sig_161 );
    sensitive << ( exitcond2_fu_191_p2 );

    ap_CS_fsm = "0000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "matrixMul_matrixMul_TRN_6_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, blockDim_x, "(port)blockDim_x");
    sc_trace(mVcdFile, blockDim_y, "(port)blockDim_y");
    sc_trace(mVcdFile, blockDim_z, "(port)blockDim_z");
    sc_trace(mVcdFile, As_address0, "(port)As_address0");
    sc_trace(mVcdFile, As_ce0, "(port)As_ce0");
    sc_trace(mVcdFile, As_we0, "(port)As_we0");
    sc_trace(mVcdFile, As_d0, "(port)As_d0");
    sc_trace(mVcdFile, A_req_din, "(port)A_req_din");
    sc_trace(mVcdFile, A_req_full_n, "(port)A_req_full_n");
    sc_trace(mVcdFile, A_req_write, "(port)A_req_write");
    sc_trace(mVcdFile, A_rsp_empty_n, "(port)A_rsp_empty_n");
    sc_trace(mVcdFile, A_rsp_read, "(port)A_rsp_read");
    sc_trace(mVcdFile, A_address, "(port)A_address");
    sc_trace(mVcdFile, A_datain, "(port)A_datain");
    sc_trace(mVcdFile, A_dataout, "(port)A_dataout");
    sc_trace(mVcdFile, A_size, "(port)A_size");
    sc_trace(mVcdFile, a_r, "(port)a_r");
    sc_trace(mVcdFile, wA, "(port)wA");
    sc_trace(mVcdFile, Bs_address0, "(port)Bs_address0");
    sc_trace(mVcdFile, Bs_ce0, "(port)Bs_ce0");
    sc_trace(mVcdFile, Bs_we0, "(port)Bs_we0");
    sc_trace(mVcdFile, Bs_d0, "(port)Bs_d0");
    sc_trace(mVcdFile, B_req_din, "(port)B_req_din");
    sc_trace(mVcdFile, B_req_full_n, "(port)B_req_full_n");
    sc_trace(mVcdFile, B_req_write, "(port)B_req_write");
    sc_trace(mVcdFile, B_rsp_empty_n, "(port)B_rsp_empty_n");
    sc_trace(mVcdFile, B_rsp_read, "(port)B_rsp_read");
    sc_trace(mVcdFile, B_address, "(port)B_address");
    sc_trace(mVcdFile, B_datain, "(port)B_datain");
    sc_trace(mVcdFile, B_dataout, "(port)B_dataout");
    sc_trace(mVcdFile, B_size, "(port)B_size");
    sc_trace(mVcdFile, b_r, "(port)b_r");
    sc_trace(mVcdFile, wB, "(port)wB");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_24, "ap_sig_24");
    sc_trace(mVcdFile, threadIdx_z_fu_196_p2, "threadIdx_z_fu_196_p2");
    sc_trace(mVcdFile, threadIdx_z_reg_329, "threadIdx_z_reg_329");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_100, "ap_sig_100");
    sc_trace(mVcdFile, next_mul1_fu_202_p2, "next_mul1_fu_202_p2");
    sc_trace(mVcdFile, next_mul1_reg_334, "next_mul1_reg_334");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_109, "ap_sig_109");
    sc_trace(mVcdFile, next_mul_fu_207_p2, "next_mul_fu_207_p2");
    sc_trace(mVcdFile, next_mul_reg_339, "next_mul_reg_339");
    sc_trace(mVcdFile, tmp_1_fu_217_p2, "tmp_1_fu_217_p2");
    sc_trace(mVcdFile, tmp_1_reg_347, "tmp_1_reg_347");
    sc_trace(mVcdFile, tmp_fu_223_p1, "tmp_fu_223_p1");
    sc_trace(mVcdFile, tmp_reg_352, "tmp_reg_352");
    sc_trace(mVcdFile, exitcond1_fu_212_p2, "exitcond1_fu_212_p2");
    sc_trace(mVcdFile, tmp_7_fu_227_p2, "tmp_7_fu_227_p2");
    sc_trace(mVcdFile, tmp_7_reg_357, "tmp_7_reg_357");
    sc_trace(mVcdFile, tmp_2_fu_232_p2, "tmp_2_fu_232_p2");
    sc_trace(mVcdFile, tmp_2_reg_362, "tmp_2_reg_362");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st4_fsm_3, "ap_sig_cseq_ST_st4_fsm_3");
    sc_trace(mVcdFile, ap_sig_132, "ap_sig_132");
    sc_trace(mVcdFile, tmp_5_cast_fu_257_p3, "tmp_5_cast_fu_257_p3");
    sc_trace(mVcdFile, tmp_5_cast_reg_379, "tmp_5_cast_reg_379");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st5_fsm_4, "ap_sig_cseq_ST_st5_fsm_4");
    sc_trace(mVcdFile, ap_sig_143, "ap_sig_143");
    sc_trace(mVcdFile, threadIdx_x_fu_269_p2, "threadIdx_x_fu_269_p2");
    sc_trace(mVcdFile, threadIdx_x_reg_387, "threadIdx_x_reg_387");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st6_fsm_5, "ap_sig_cseq_ST_st6_fsm_5");
    sc_trace(mVcdFile, ap_sig_152, "ap_sig_152");
    sc_trace(mVcdFile, exitcond_fu_264_p2, "exitcond_fu_264_p2");
    sc_trace(mVcdFile, ap_sig_161, "ap_sig_161");
    sc_trace(mVcdFile, A_addr_read_reg_392, "A_addr_read_reg_392");
    sc_trace(mVcdFile, tmp_5_fu_279_p2, "tmp_5_fu_279_p2");
    sc_trace(mVcdFile, tmp_5_reg_397, "tmp_5_reg_397");
    sc_trace(mVcdFile, B_addr_read_reg_402, "B_addr_read_reg_402");
    sc_trace(mVcdFile, threadIdx_2_reg_136, "threadIdx_2_reg_136");
    sc_trace(mVcdFile, threadIdx_y_reg_147, "threadIdx_y_reg_147");
    sc_trace(mVcdFile, exitcond2_fu_191_p2, "exitcond2_fu_191_p2");
    sc_trace(mVcdFile, phi_mul_reg_158, "phi_mul_reg_158");
    sc_trace(mVcdFile, phi_mul1_reg_169, "phi_mul1_reg_169");
    sc_trace(mVcdFile, threadIdx_reg_180, "threadIdx_reg_180");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st7_fsm_6, "ap_sig_cseq_ST_st7_fsm_6");
    sc_trace(mVcdFile, ap_sig_193, "ap_sig_193");
    sc_trace(mVcdFile, tmp_14_cast_fu_284_p1, "tmp_14_cast_fu_284_p1");
    sc_trace(mVcdFile, tmp_s_fu_237_p1, "tmp_s_fu_237_p1");
    sc_trace(mVcdFile, tmp_3_fu_240_p1, "tmp_3_fu_240_p1");
    sc_trace(mVcdFile, tmp_4_fu_275_p1, "tmp_4_fu_275_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

matrixMul_matrixMul_TRN_6::~matrixMul_matrixMul_TRN_6() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void matrixMul_matrixMul_TRN_6::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) && 
         !ap_sig_161.read() && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_264_p2.read()))) {
        phi_mul1_reg_169 = next_mul1_reg_334.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_191_p2.read()))) {
        phi_mul1_reg_169 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) && 
         !ap_sig_161.read() && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_264_p2.read()))) {
        phi_mul_reg_158 = next_mul_reg_339.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_191_p2.read()))) {
        phi_mul_reg_158 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
         !esl_seteq<1,1,1>(exitcond1_fu_212_p2.read(), ap_const_lv1_0))) {
        threadIdx_2_reg_136 = threadIdx_z_reg_329.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        threadIdx_2_reg_136 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read())) {
        threadIdx_reg_180 = threadIdx_x_reg_387.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        threadIdx_reg_180 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) && 
         !ap_sig_161.read() && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_264_p2.read()))) {
        threadIdx_y_reg_147 = tmp_1_reg_347.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_191_p2.read()))) {
        threadIdx_y_reg_147 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_264_p2.read()) && !ap_sig_161.read())) {
        A_addr_read_reg_392 = A_datain.read();
        B_addr_read_reg_402 = B_datain.read();
        tmp_5_reg_397 = tmp_5_fu_279_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        next_mul1_reg_334 = next_mul1_fu_202_p2.read();
        next_mul_reg_339 = next_mul_fu_207_p2.read();
        tmp_1_reg_347 = tmp_1_fu_217_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) && !ap_sig_161.read())) {
        threadIdx_x_reg_387 = threadIdx_x_fu_269_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        threadIdx_z_reg_329 = threadIdx_z_fu_196_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && esl_seteq<1,1,1>(exitcond1_fu_212_p2.read(), ap_const_lv1_0))) {
        tmp_2_reg_362 = tmp_2_fu_232_p2.read();
        tmp_7_reg_357 = tmp_7_fu_227_p2.read();
        tmp_reg_352 = tmp_fu_223_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st5_fsm_4.read())) {
        tmp_5_cast_reg_379 = tmp_5_cast_fu_257_p3.read();
    }
}

void matrixMul_matrixMul_TRN_6::thread_A_address() {
    A_address =  (sc_lv<32>) (tmp_s_fu_237_p1.read());
}

void matrixMul_matrixMul_TRN_6::thread_A_dataout() {
    A_dataout = ap_const_lv32_0;
}

void matrixMul_matrixMul_TRN_6::thread_A_req_din() {
    A_req_din = ap_const_logic_0;
}

void matrixMul_matrixMul_TRN_6::thread_A_req_write() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        A_req_write = ap_const_logic_1;
    } else {
        A_req_write = ap_const_logic_0;
    }
}

void matrixMul_matrixMul_TRN_6::thread_A_rsp_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_264_p2.read()) && 
         !ap_sig_161.read())) {
        A_rsp_read = ap_const_logic_1;
    } else {
        A_rsp_read = ap_const_logic_0;
    }
}

void matrixMul_matrixMul_TRN_6::thread_A_size() {
    A_size = blockDim_x.read();
}

void matrixMul_matrixMul_TRN_6::thread_As_address0() {
    As_address0 =  (sc_lv<8>) (tmp_14_cast_fu_284_p1.read());
}

void matrixMul_matrixMul_TRN_6::thread_As_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read())) {
        As_ce0 = ap_const_logic_1;
    } else {
        As_ce0 = ap_const_logic_0;
    }
}

void matrixMul_matrixMul_TRN_6::thread_As_d0() {
    As_d0 = A_addr_read_reg_392.read();
}

void matrixMul_matrixMul_TRN_6::thread_As_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read()))) {
        As_we0 = ap_const_logic_1;
    } else {
        As_we0 = ap_const_logic_0;
    }
}

void matrixMul_matrixMul_TRN_6::thread_B_address() {
    B_address =  (sc_lv<32>) (tmp_3_fu_240_p1.read());
}

void matrixMul_matrixMul_TRN_6::thread_B_dataout() {
    B_dataout = ap_const_lv32_0;
}

void matrixMul_matrixMul_TRN_6::thread_B_req_din() {
    B_req_din = ap_const_logic_0;
}

void matrixMul_matrixMul_TRN_6::thread_B_req_write() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        B_req_write = ap_const_logic_1;
    } else {
        B_req_write = ap_const_logic_0;
    }
}

void matrixMul_matrixMul_TRN_6::thread_B_rsp_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st6_fsm_5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_264_p2.read()) && 
         !ap_sig_161.read())) {
        B_rsp_read = ap_const_logic_1;
    } else {
        B_rsp_read = ap_const_logic_0;
    }
}

void matrixMul_matrixMul_TRN_6::thread_B_size() {
    B_size = blockDim_x.read();
}

void matrixMul_matrixMul_TRN_6::thread_Bs_address0() {
    Bs_address0 =  (sc_lv<8>) (tmp_14_cast_fu_284_p1.read());
}

void matrixMul_matrixMul_TRN_6::thread_Bs_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read())) {
        Bs_ce0 = ap_const_logic_1;
    } else {
        Bs_ce0 = ap_const_logic_0;
    }
}

void matrixMul_matrixMul_TRN_6::thread_Bs_d0() {
    Bs_d0 = B_addr_read_reg_402.read();
}

void matrixMul_matrixMul_TRN_6::thread_Bs_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st7_fsm_6.read()))) {
        Bs_we0 = ap_const_logic_1;
    } else {
        Bs_we0 = ap_const_logic_0;
    }
}

void matrixMul_matrixMul_TRN_6::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
          !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_191_p2.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void matrixMul_matrixMul_TRN_6::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void matrixMul_matrixMul_TRN_6::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_191_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void matrixMul_matrixMul_TRN_6::thread_ap_sig_100() {
    ap_sig_100 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void matrixMul_matrixMul_TRN_6::thread_ap_sig_109() {
    ap_sig_109 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void matrixMul_matrixMul_TRN_6::thread_ap_sig_132() {
    ap_sig_132 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(3, 3));
}

void matrixMul_matrixMul_TRN_6::thread_ap_sig_143() {
    ap_sig_143 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(4, 4));
}

void matrixMul_matrixMul_TRN_6::thread_ap_sig_152() {
    ap_sig_152 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(5, 5));
}

void matrixMul_matrixMul_TRN_6::thread_ap_sig_161() {
    ap_sig_161 = ((esl_seteq<1,1,1>(A_rsp_empty_n.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_264_p2.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_264_p2.read()) && 
  esl_seteq<1,1,1>(B_rsp_empty_n.read(), ap_const_logic_0)));
}

void matrixMul_matrixMul_TRN_6::thread_ap_sig_193() {
    ap_sig_193 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(6, 6));
}

void matrixMul_matrixMul_TRN_6::thread_ap_sig_24() {
    ap_sig_24 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void matrixMul_matrixMul_TRN_6::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_24.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void matrixMul_matrixMul_TRN_6::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_100.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void matrixMul_matrixMul_TRN_6::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_109.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void matrixMul_matrixMul_TRN_6::thread_ap_sig_cseq_ST_st4_fsm_3() {
    if (ap_sig_132.read()) {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    }
}

void matrixMul_matrixMul_TRN_6::thread_ap_sig_cseq_ST_st5_fsm_4() {
    if (ap_sig_143.read()) {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    }
}

void matrixMul_matrixMul_TRN_6::thread_ap_sig_cseq_ST_st6_fsm_5() {
    if (ap_sig_152.read()) {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    }
}

void matrixMul_matrixMul_TRN_6::thread_ap_sig_cseq_ST_st7_fsm_6() {
    if (ap_sig_193.read()) {
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    }
}

void matrixMul_matrixMul_TRN_6::thread_exitcond1_fu_212_p2() {
    exitcond1_fu_212_p2 = (!threadIdx_y_reg_147.read().is_01() || !blockDim_y.read().is_01())? sc_lv<1>(): sc_lv<1>(threadIdx_y_reg_147.read() == blockDim_y.read());
}

void matrixMul_matrixMul_TRN_6::thread_exitcond2_fu_191_p2() {
    exitcond2_fu_191_p2 = (!threadIdx_2_reg_136.read().is_01() || !blockDim_z.read().is_01())? sc_lv<1>(): sc_lv<1>(threadIdx_2_reg_136.read() == blockDim_z.read());
}

void matrixMul_matrixMul_TRN_6::thread_exitcond_fu_264_p2() {
    exitcond_fu_264_p2 = (!threadIdx_reg_180.read().is_01() || !blockDim_x.read().is_01())? sc_lv<1>(): sc_lv<1>(threadIdx_reg_180.read() == blockDim_x.read());
}

void matrixMul_matrixMul_TRN_6::thread_next_mul1_fu_202_p2() {
    next_mul1_fu_202_p2 = (!phi_mul1_reg_169.read().is_01() || !wB.read().is_01())? sc_lv<32>(): (sc_biguint<32>(phi_mul1_reg_169.read()) + sc_biguint<32>(wB.read()));
}

void matrixMul_matrixMul_TRN_6::thread_next_mul_fu_207_p2() {
    next_mul_fu_207_p2 = (!phi_mul_reg_158.read().is_01() || !wA.read().is_01())? sc_lv<32>(): (sc_biguint<32>(phi_mul_reg_158.read()) + sc_biguint<32>(wA.read()));
}

void matrixMul_matrixMul_TRN_6::thread_threadIdx_x_fu_269_p2() {
    threadIdx_x_fu_269_p2 = (!threadIdx_reg_180.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(threadIdx_reg_180.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void matrixMul_matrixMul_TRN_6::thread_threadIdx_z_fu_196_p2() {
    threadIdx_z_fu_196_p2 = (!threadIdx_2_reg_136.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(threadIdx_2_reg_136.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void matrixMul_matrixMul_TRN_6::thread_tmp_14_cast_fu_284_p1() {
    tmp_14_cast_fu_284_p1 = esl_zext<64,10>(tmp_5_reg_397.read());
}

void matrixMul_matrixMul_TRN_6::thread_tmp_1_fu_217_p2() {
    tmp_1_fu_217_p2 = (!threadIdx_y_reg_147.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(threadIdx_y_reg_147.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void matrixMul_matrixMul_TRN_6::thread_tmp_2_fu_232_p2() {
    tmp_2_fu_232_p2 = (!phi_mul1_reg_169.read().is_01() || !b_r.read().is_01())? sc_lv<32>(): (sc_biguint<32>(phi_mul1_reg_169.read()) + sc_biguint<32>(b_r.read()));
}

void matrixMul_matrixMul_TRN_6::thread_tmp_3_fu_240_p1() {
    tmp_3_fu_240_p1 = esl_zext<64,32>(tmp_2_reg_362.read());
}

void matrixMul_matrixMul_TRN_6::thread_tmp_4_fu_275_p1() {
    tmp_4_fu_275_p1 = threadIdx_reg_180.read().range(10-1, 0);
}

void matrixMul_matrixMul_TRN_6::thread_tmp_5_cast_fu_257_p3() {
    tmp_5_cast_fu_257_p3 = esl_concat<6,4>(tmp_reg_352.read(), ap_const_lv4_0);
}

void matrixMul_matrixMul_TRN_6::thread_tmp_5_fu_279_p2() {
    tmp_5_fu_279_p2 = (!tmp_5_cast_reg_379.read().is_01() || !tmp_4_fu_275_p1.read().is_01())? sc_lv<10>(): (sc_biguint<10>(tmp_5_cast_reg_379.read()) + sc_biguint<10>(tmp_4_fu_275_p1.read()));
}

void matrixMul_matrixMul_TRN_6::thread_tmp_7_fu_227_p2() {
    tmp_7_fu_227_p2 = (!phi_mul_reg_158.read().is_01() || !a_r.read().is_01())? sc_lv<32>(): (sc_biguint<32>(phi_mul_reg_158.read()) + sc_biguint<32>(a_r.read()));
}

void matrixMul_matrixMul_TRN_6::thread_tmp_fu_223_p1() {
    tmp_fu_223_p1 = threadIdx_y_reg_147.read().range(6-1, 0);
}

void matrixMul_matrixMul_TRN_6::thread_tmp_s_fu_237_p1() {
    tmp_s_fu_237_p1 = esl_zext<64,32>(tmp_7_reg_357.read());
}

void matrixMul_matrixMul_TRN_6::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_191_p2.read())) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 4 : 
            if (esl_seteq<1,1,1>(exitcond1_fu_212_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            } else {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_264_p2.read()) && !ap_sig_161.read())) {
                ap_NS_fsm = ap_ST_st7_fsm_6;
            } else if ((!ap_sig_161.read() && !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_264_p2.read()))) {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            } else {
                ap_NS_fsm = ap_ST_st6_fsm_5;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
            break;
        default : 
            ap_NS_fsm = "XXXXXXX";
            break;
    }
}

}

