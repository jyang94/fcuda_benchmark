-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixMul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    C_req_din : OUT STD_LOGIC;
    C_req_full_n : IN STD_LOGIC;
    C_req_write : OUT STD_LOGIC;
    C_rsp_empty_n : IN STD_LOGIC;
    C_rsp_read : OUT STD_LOGIC;
    C_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    C_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_req_din : OUT STD_LOGIC;
    A_req_full_n : IN STD_LOGIC;
    A_req_write : OUT STD_LOGIC;
    A_rsp_empty_n : IN STD_LOGIC;
    A_rsp_read : OUT STD_LOGIC;
    A_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    A_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_req_din : OUT STD_LOGIC;
    B_req_full_n : IN STD_LOGIC;
    B_req_write : OUT STD_LOGIC;
    B_rsp_empty_n : IN STD_LOGIC;
    B_rsp_read : OUT STD_LOGIC;
    B_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    B_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    wA : IN STD_LOGIC_VECTOR (31 downto 0);
    wB : IN STD_LOGIC_VECTOR (31 downto 0);
    gridDim_x : IN STD_LOGIC_VECTOR (31 downto 0);
    gridDim_y : IN STD_LOGIC_VECTOR (31 downto 0);
    gridDim_z : IN STD_LOGIC_VECTOR (31 downto 0);
    blockDim_x : IN STD_LOGIC_VECTOR (31 downto 0);
    blockDim_y : IN STD_LOGIC_VECTOR (31 downto 0);
    blockDim_z : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of matrixMul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixMul,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=5,HLS_SYN_FF=2206,HLS_SYN_LUT=2545}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_26 : BOOLEAN;
    signal bStep_block0_fu_280_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bStep_block0_reg_477 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul2_fu_286_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul2_reg_482 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_106 : BOOLEAN;
    signal next_mul_fu_291_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_reg_487 : STD_LOGIC_VECTOR (31 downto 0);
    signal blockIdx_loop_y_fu_301_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal blockIdx_loop_y_reg_495 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_block0_2_fu_307_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_block0_2_reg_500 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal aEnd_block0_fu_319_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal aEnd_block0_reg_505 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_329_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_reg_513 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_127 : BOOLEAN;
    signal b_block0_2_fu_335_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_block0_2_reg_518 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal threadIdx_z_fu_346_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal threadIdx_z_reg_526 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_141 : BOOLEAN;
    signal tmp_23_i_fu_357_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_i_reg_534 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_150 : BOOLEAN;
    signal tmp_34_cast_fu_367_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_34_cast_reg_539 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond1_i_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal threadIdx_x_fu_380_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_164 : BOOLEAN;
    signal a_block0_fu_405_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_block0_reg_555 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_173 : BOOLEAN;
    signal tmp_18_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_block0_fu_411_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_block0_reg_560 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_block0_fu_422_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_block0_reg_565 : STD_LOGIC_VECTOR (31 downto 0);
    signal Csub_block_block0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Csub_block_block0_ce0 : STD_LOGIC;
    signal Csub_block_block0_we0 : STD_LOGIC;
    signal Csub_block_block0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Csub_block_block0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal As_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal As_ce0 : STD_LOGIC;
    signal As_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Bs_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Bs_ce0 : STD_LOGIC;
    signal Bs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrixMul_matrixMul_SNC_7_fu_239_ap_start : STD_LOGIC;
    signal grp_matrixMul_matrixMul_SNC_7_fu_239_ap_done : STD_LOGIC;
    signal grp_matrixMul_matrixMul_SNC_7_fu_239_ap_idle : STD_LOGIC;
    signal grp_matrixMul_matrixMul_SNC_7_fu_239_ap_ready : STD_LOGIC;
    signal grp_matrixMul_matrixMul_SNC_7_fu_239_Csub_block_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_matrixMul_matrixMul_SNC_7_fu_239_Csub_block_ce0 : STD_LOGIC;
    signal grp_matrixMul_matrixMul_SNC_7_fu_239_Csub_block_we0 : STD_LOGIC;
    signal grp_matrixMul_matrixMul_SNC_7_fu_239_Csub_block_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrixMul_matrixMul_SNC_7_fu_239_As_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_matrixMul_matrixMul_SNC_7_fu_239_As_ce0 : STD_LOGIC;
    signal grp_matrixMul_matrixMul_SNC_7_fu_239_Bs_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_matrixMul_matrixMul_SNC_7_fu_239_Bs_ce0 : STD_LOGIC;
    signal grp_matrixMul_matrixMul_TRN_6_fu_249_ap_start : STD_LOGIC;
    signal grp_matrixMul_matrixMul_TRN_6_fu_249_ap_done : STD_LOGIC;
    signal grp_matrixMul_matrixMul_TRN_6_fu_249_ap_idle : STD_LOGIC;
    signal grp_matrixMul_matrixMul_TRN_6_fu_249_ap_ready : STD_LOGIC;
    signal grp_matrixMul_matrixMul_TRN_6_fu_249_As_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_matrixMul_matrixMul_TRN_6_fu_249_As_ce0 : STD_LOGIC;
    signal grp_matrixMul_matrixMul_TRN_6_fu_249_As_we0 : STD_LOGIC;
    signal grp_matrixMul_matrixMul_TRN_6_fu_249_As_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrixMul_matrixMul_TRN_6_fu_249_A_req_din : STD_LOGIC;
    signal grp_matrixMul_matrixMul_TRN_6_fu_249_A_req_write : STD_LOGIC;
    signal grp_matrixMul_matrixMul_TRN_6_fu_249_A_rsp_read : STD_LOGIC;
    signal grp_matrixMul_matrixMul_TRN_6_fu_249_A_address : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrixMul_matrixMul_TRN_6_fu_249_A_dataout : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrixMul_matrixMul_TRN_6_fu_249_A_size : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrixMul_matrixMul_TRN_6_fu_249_Bs_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_matrixMul_matrixMul_TRN_6_fu_249_Bs_ce0 : STD_LOGIC;
    signal grp_matrixMul_matrixMul_TRN_6_fu_249_Bs_we0 : STD_LOGIC;
    signal grp_matrixMul_matrixMul_TRN_6_fu_249_Bs_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrixMul_matrixMul_TRN_6_fu_249_B_req_din : STD_LOGIC;
    signal grp_matrixMul_matrixMul_TRN_6_fu_249_B_req_write : STD_LOGIC;
    signal grp_matrixMul_matrixMul_TRN_6_fu_249_B_rsp_read : STD_LOGIC;
    signal grp_matrixMul_matrixMul_TRN_6_fu_249_B_address : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrixMul_matrixMul_TRN_6_fu_249_B_dataout : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrixMul_matrixMul_TRN_6_fu_249_B_size : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_ap_start : STD_LOGIC;
    signal grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_ap_done : STD_LOGIC;
    signal grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_ap_idle : STD_LOGIC;
    signal grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_ap_ready : STD_LOGIC;
    signal grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_C_req_din : STD_LOGIC;
    signal grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_C_req_write : STD_LOGIC;
    signal grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_C_rsp_read : STD_LOGIC;
    signal grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_C_address : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_C_dataout : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_C_size : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_Csub_block_block0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_Csub_block_block0_ce0 : STD_LOGIC;
    signal blockIdx_block0_y_reg_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul_reg_151 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul1_reg_162 : STD_LOGIC_VECTOR (31 downto 0);
    signal blockIdx_loop_x_reg_174 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_309 : BOOLEAN;
    signal threadIdx_2_i_reg_186 : STD_LOGIC_VECTOR (31 downto 0);
    signal threadIdx_y_reg_197 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_i_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal threadIdx_i_reg_208 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_block_reg_219 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_337 : BOOLEAN;
    signal b_block_reg_229 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_grp_matrixMul_matrixMul_SNC_7_fu_239_ap_start : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_353 : BOOLEAN;
    signal ap_reg_grp_matrixMul_matrixMul_TRN_6_fu_249_ap_start : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_362 : BOOLEAN;
    signal ap_reg_grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_ap_start : STD_LOGIC := '0';
    signal tmp_35_cast_fu_395_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp1_fu_313_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_363_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_fu_386_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_19_fu_390_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_416_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component matrixMul_matrixMul_SNC_7 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        blockDim_x : IN STD_LOGIC_VECTOR (31 downto 0);
        blockDim_y : IN STD_LOGIC_VECTOR (31 downto 0);
        blockDim_z : IN STD_LOGIC_VECTOR (31 downto 0);
        Csub_block_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        Csub_block_ce0 : OUT STD_LOGIC;
        Csub_block_we0 : OUT STD_LOGIC;
        Csub_block_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Csub_block_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        As_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        As_ce0 : OUT STD_LOGIC;
        As_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Bs_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        Bs_ce0 : OUT STD_LOGIC;
        Bs_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrixMul_matrixMul_TRN_6 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        blockDim_x : IN STD_LOGIC_VECTOR (31 downto 0);
        blockDim_y : IN STD_LOGIC_VECTOR (31 downto 0);
        blockDim_z : IN STD_LOGIC_VECTOR (31 downto 0);
        As_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        As_ce0 : OUT STD_LOGIC;
        As_we0 : OUT STD_LOGIC;
        As_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_req_din : OUT STD_LOGIC;
        A_req_full_n : IN STD_LOGIC;
        A_req_write : OUT STD_LOGIC;
        A_rsp_empty_n : IN STD_LOGIC;
        A_rsp_read : OUT STD_LOGIC;
        A_address : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_datain : IN STD_LOGIC_VECTOR (31 downto 0);
        A_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
        A_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        a_r : IN STD_LOGIC_VECTOR (31 downto 0);
        wA : IN STD_LOGIC_VECTOR (31 downto 0);
        Bs_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        Bs_ce0 : OUT STD_LOGIC;
        Bs_we0 : OUT STD_LOGIC;
        Bs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_req_din : OUT STD_LOGIC;
        B_req_full_n : IN STD_LOGIC;
        B_req_write : OUT STD_LOGIC;
        B_rsp_empty_n : IN STD_LOGIC;
        B_rsp_read : OUT STD_LOGIC;
        B_address : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_datain : IN STD_LOGIC_VECTOR (31 downto 0);
        B_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        b_r : IN STD_LOGIC_VECTOR (31 downto 0);
        wB : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrixMul_matrixMul_TRN_10_wrapper IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        blockDim_x : IN STD_LOGIC_VECTOR (31 downto 0);
        blockDim_y : IN STD_LOGIC_VECTOR (31 downto 0);
        blockDim_z : IN STD_LOGIC_VECTOR (31 downto 0);
        C_req_din : OUT STD_LOGIC;
        C_req_full_n : IN STD_LOGIC;
        C_req_write : OUT STD_LOGIC;
        C_rsp_empty_n : IN STD_LOGIC;
        C_rsp_read : OUT STD_LOGIC;
        C_address : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_datain : IN STD_LOGIC_VECTOR (31 downto 0);
        C_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        Csub_block_block0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        Csub_block_block0_ce0 : OUT STD_LOGIC;
        Csub_block_block0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        c_block0 : IN STD_LOGIC_VECTOR (31 downto 0);
        wB : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrixMul_Csub_block_block0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    Csub_block_block0_U : component matrixMul_Csub_block_block0
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Csub_block_block0_address0,
        ce0 => Csub_block_block0_ce0,
        we0 => Csub_block_block0_we0,
        d0 => Csub_block_block0_d0,
        q0 => Csub_block_block0_q0);

    As_U : component matrixMul_Csub_block_block0
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => As_address0,
        ce0 => As_ce0,
        we0 => grp_matrixMul_matrixMul_TRN_6_fu_249_As_we0,
        d0 => grp_matrixMul_matrixMul_TRN_6_fu_249_As_d0,
        q0 => As_q0);

    Bs_U : component matrixMul_Csub_block_block0
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Bs_address0,
        ce0 => Bs_ce0,
        we0 => grp_matrixMul_matrixMul_TRN_6_fu_249_Bs_we0,
        d0 => grp_matrixMul_matrixMul_TRN_6_fu_249_Bs_d0,
        q0 => Bs_q0);

    grp_matrixMul_matrixMul_SNC_7_fu_239 : component matrixMul_matrixMul_SNC_7
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_matrixMul_matrixMul_SNC_7_fu_239_ap_start,
        ap_done => grp_matrixMul_matrixMul_SNC_7_fu_239_ap_done,
        ap_idle => grp_matrixMul_matrixMul_SNC_7_fu_239_ap_idle,
        ap_ready => grp_matrixMul_matrixMul_SNC_7_fu_239_ap_ready,
        blockDim_x => blockDim_x,
        blockDim_y => blockDim_y,
        blockDim_z => blockDim_z,
        Csub_block_address0 => grp_matrixMul_matrixMul_SNC_7_fu_239_Csub_block_address0,
        Csub_block_ce0 => grp_matrixMul_matrixMul_SNC_7_fu_239_Csub_block_ce0,
        Csub_block_we0 => grp_matrixMul_matrixMul_SNC_7_fu_239_Csub_block_we0,
        Csub_block_d0 => grp_matrixMul_matrixMul_SNC_7_fu_239_Csub_block_d0,
        Csub_block_q0 => Csub_block_block0_q0,
        As_address0 => grp_matrixMul_matrixMul_SNC_7_fu_239_As_address0,
        As_ce0 => grp_matrixMul_matrixMul_SNC_7_fu_239_As_ce0,
        As_q0 => As_q0,
        Bs_address0 => grp_matrixMul_matrixMul_SNC_7_fu_239_Bs_address0,
        Bs_ce0 => grp_matrixMul_matrixMul_SNC_7_fu_239_Bs_ce0,
        Bs_q0 => Bs_q0);

    grp_matrixMul_matrixMul_TRN_6_fu_249 : component matrixMul_matrixMul_TRN_6
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_matrixMul_matrixMul_TRN_6_fu_249_ap_start,
        ap_done => grp_matrixMul_matrixMul_TRN_6_fu_249_ap_done,
        ap_idle => grp_matrixMul_matrixMul_TRN_6_fu_249_ap_idle,
        ap_ready => grp_matrixMul_matrixMul_TRN_6_fu_249_ap_ready,
        blockDim_x => blockDim_x,
        blockDim_y => blockDim_y,
        blockDim_z => blockDim_z,
        As_address0 => grp_matrixMul_matrixMul_TRN_6_fu_249_As_address0,
        As_ce0 => grp_matrixMul_matrixMul_TRN_6_fu_249_As_ce0,
        As_we0 => grp_matrixMul_matrixMul_TRN_6_fu_249_As_we0,
        As_d0 => grp_matrixMul_matrixMul_TRN_6_fu_249_As_d0,
        A_req_din => grp_matrixMul_matrixMul_TRN_6_fu_249_A_req_din,
        A_req_full_n => A_req_full_n,
        A_req_write => grp_matrixMul_matrixMul_TRN_6_fu_249_A_req_write,
        A_rsp_empty_n => A_rsp_empty_n,
        A_rsp_read => grp_matrixMul_matrixMul_TRN_6_fu_249_A_rsp_read,
        A_address => grp_matrixMul_matrixMul_TRN_6_fu_249_A_address,
        A_datain => A_datain,
        A_dataout => grp_matrixMul_matrixMul_TRN_6_fu_249_A_dataout,
        A_size => grp_matrixMul_matrixMul_TRN_6_fu_249_A_size,
        a_r => a_block_reg_219,
        wA => wA,
        Bs_address0 => grp_matrixMul_matrixMul_TRN_6_fu_249_Bs_address0,
        Bs_ce0 => grp_matrixMul_matrixMul_TRN_6_fu_249_Bs_ce0,
        Bs_we0 => grp_matrixMul_matrixMul_TRN_6_fu_249_Bs_we0,
        Bs_d0 => grp_matrixMul_matrixMul_TRN_6_fu_249_Bs_d0,
        B_req_din => grp_matrixMul_matrixMul_TRN_6_fu_249_B_req_din,
        B_req_full_n => B_req_full_n,
        B_req_write => grp_matrixMul_matrixMul_TRN_6_fu_249_B_req_write,
        B_rsp_empty_n => B_rsp_empty_n,
        B_rsp_read => grp_matrixMul_matrixMul_TRN_6_fu_249_B_rsp_read,
        B_address => grp_matrixMul_matrixMul_TRN_6_fu_249_B_address,
        B_datain => B_datain,
        B_dataout => grp_matrixMul_matrixMul_TRN_6_fu_249_B_dataout,
        B_size => grp_matrixMul_matrixMul_TRN_6_fu_249_B_size,
        b_r => b_block_reg_229,
        wB => wB);

    grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268 : component matrixMul_matrixMul_TRN_10_wrapper
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_ap_start,
        ap_done => grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_ap_done,
        ap_idle => grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_ap_idle,
        ap_ready => grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_ap_ready,
        blockDim_x => blockDim_x,
        blockDim_y => blockDim_y,
        blockDim_z => blockDim_z,
        C_req_din => grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_C_req_din,
        C_req_full_n => C_req_full_n,
        C_req_write => grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_C_req_write,
        C_rsp_empty_n => C_rsp_empty_n,
        C_rsp_read => grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_C_rsp_read,
        C_address => grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_C_address,
        C_datain => C_datain,
        C_dataout => grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_C_dataout,
        C_size => grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_C_size,
        Csub_block_block0_address0 => grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_Csub_block_block0_address0,
        Csub_block_block0_ce0 => grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_Csub_block_block0_ce0,
        Csub_block_block0_q0 => Csub_block_block0_q0,
        c_block0 => c_block0_reg_565,
        wB => wB);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_matrixMul_matrixMul_SNC_7_fu_239_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_matrixMul_matrixMul_SNC_7_fu_239_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
                    ap_reg_grp_matrixMul_matrixMul_SNC_7_fu_239_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_matrixMul_matrixMul_SNC_7_fu_239_ap_ready)) then 
                    ap_reg_grp_matrixMul_matrixMul_SNC_7_fu_239_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = tmp_18_fu_400_p2)))) then 
                    ap_reg_grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_ap_ready)) then 
                    ap_reg_grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_matrixMul_matrixMul_TRN_6_fu_249_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_matrixMul_matrixMul_TRN_6_fu_249_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = tmp_18_fu_400_p2))) then 
                    ap_reg_grp_matrixMul_matrixMul_TRN_6_fu_249_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_matrixMul_matrixMul_TRN_6_fu_249_ap_ready)) then 
                    ap_reg_grp_matrixMul_matrixMul_TRN_6_fu_249_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    a_block_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond2_i_fu_341_p2)))) then 
                a_block_reg_219 <= a_block0_2_reg_500;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_logic_0 = grp_matrixMul_matrixMul_SNC_7_fu_239_ap_done)))) then 
                a_block_reg_219 <= a_block0_reg_555;
            end if; 
        end if;
    end process;

    b_block_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond2_i_fu_341_p2)))) then 
                b_block_reg_229 <= b_block0_2_reg_518;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_logic_0 = grp_matrixMul_matrixMul_SNC_7_fu_239_ap_done)))) then 
                b_block_reg_229 <= b_block0_reg_560;
            end if; 
        end if;
    end process;

    blockIdx_block0_y_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = tmp_16_fu_324_p2)))) then 
                blockIdx_block0_y_reg_140 <= blockIdx_loop_y_reg_495;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                blockIdx_block0_y_reg_140 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    blockIdx_loop_x_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_s_fu_296_p2 = ap_const_lv1_0))) then 
                blockIdx_loop_x_reg_174 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and not((ap_const_logic_0 = grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_ap_done)))) then 
                blockIdx_loop_x_reg_174 <= tmp_17_reg_513;
            end if; 
        end if;
    end process;

    phi_mul1_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = tmp_16_fu_324_p2)))) then 
                phi_mul1_reg_162 <= next_mul2_reg_482;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                phi_mul1_reg_162 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = tmp_16_fu_324_p2)))) then 
                phi_mul_reg_151 <= next_mul_reg_487;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                phi_mul_reg_151 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    threadIdx_2_i_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond1_i_fu_352_p2)))) then 
                threadIdx_2_i_reg_186 <= threadIdx_z_reg_526;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_16_fu_324_p2))) then 
                threadIdx_2_i_reg_186 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    threadIdx_i_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond_i_fu_375_p2))) then 
                threadIdx_i_reg_208 <= threadIdx_x_fu_380_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond1_i_fu_352_p2))) then 
                threadIdx_i_reg_208 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    threadIdx_y_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = exitcond_i_fu_375_p2)))) then 
                threadIdx_y_reg_197 <= tmp_23_i_reg_534;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond2_i_fu_341_p2))) then 
                threadIdx_y_reg_197 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_s_fu_296_p2 = ap_const_lv1_0))) then
                aEnd_block0_reg_505 <= aEnd_block0_fu_319_p2;
                    a_block0_2_reg_500(31 downto 4) <= a_block0_2_fu_307_p2(31 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and (ap_const_lv1_0 = tmp_18_fu_400_p2))) then
                a_block0_reg_555 <= a_block0_fu_405_p2;
                b_block0_reg_560 <= b_block0_fu_411_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                    bStep_block0_reg_477(31 downto 4) <= bStep_block0_fu_280_p2(31 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_16_fu_324_p2))) then
                    b_block0_2_reg_518(31 downto 4) <= b_block0_2_fu_335_p2(31 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                blockIdx_loop_y_reg_495 <= blockIdx_loop_y_fu_301_p2;
                next_mul2_reg_482 <= next_mul2_fu_286_p2;
                next_mul_reg_487 <= next_mul_fu_291_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = tmp_18_fu_400_p2)))) then
                    c_block0_reg_565(31 downto 4) <= c_block0_fu_422_p2(31 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                threadIdx_z_reg_526 <= threadIdx_z_fu_346_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                tmp_17_reg_513 <= tmp_17_fu_329_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                tmp_23_i_reg_534 <= tmp_23_i_fu_357_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond1_i_fu_352_p2))) then
                    tmp_34_cast_reg_539(9 downto 4) <= tmp_34_cast_fu_367_p3(9 downto 4);
            end if;
        end if;
    end process;
    bStep_block0_reg_477(3 downto 0) <= "0000";
    a_block0_2_reg_500(3 downto 0) <= "0000";
    b_block0_2_reg_518(3 downto 0) <= "0000";
    tmp_34_cast_reg_539(3 downto 0) <= "0000";
    c_block0_reg_565(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_s_fu_296_p2, tmp_16_fu_324_p2, exitcond1_i_fu_352_p2, tmp_18_fu_400_p2, grp_matrixMul_matrixMul_SNC_7_fu_239_ap_done, grp_matrixMul_matrixMul_TRN_6_fu_249_ap_done, grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_ap_done, exitcond2_i_fu_341_p2, exitcond_i_fu_375_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((tmp_s_fu_296_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((ap_const_lv1_0 = tmp_16_fu_324_p2)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = exitcond2_i_fu_341_p2))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                if ((ap_const_lv1_0 = exitcond1_i_fu_352_p2)) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st6_fsm_5 => 
                if ((ap_const_lv1_0 = exitcond_i_fu_375_p2)) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st7_fsm_6 => 
                if (not((ap_const_lv1_0 = tmp_18_fu_400_p2))) then
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st8_fsm_7 => 
                if (not((ap_const_logic_0 = grp_matrixMul_matrixMul_TRN_6_fu_249_ap_done))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                if (not((ap_const_logic_0 = grp_matrixMul_matrixMul_SNC_7_fu_239_ap_done))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                end if;
            when ap_ST_st11_fsm_10 => 
                if (not((ap_const_logic_0 = grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_ap_done))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    A_address <= grp_matrixMul_matrixMul_TRN_6_fu_249_A_address;
    A_dataout <= grp_matrixMul_matrixMul_TRN_6_fu_249_A_dataout;
    A_req_din <= grp_matrixMul_matrixMul_TRN_6_fu_249_A_req_din;
    A_req_write <= grp_matrixMul_matrixMul_TRN_6_fu_249_A_req_write;
    A_rsp_read <= grp_matrixMul_matrixMul_TRN_6_fu_249_A_rsp_read;
    A_size <= grp_matrixMul_matrixMul_TRN_6_fu_249_A_size;

    As_address0_assign_proc : process(grp_matrixMul_matrixMul_SNC_7_fu_239_As_address0, grp_matrixMul_matrixMul_TRN_6_fu_249_As_address0, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            As_address0 <= grp_matrixMul_matrixMul_TRN_6_fu_249_As_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            As_address0 <= grp_matrixMul_matrixMul_SNC_7_fu_239_As_address0;
        else 
            As_address0 <= "XXXXXXXX";
        end if; 
    end process;


    As_ce0_assign_proc : process(grp_matrixMul_matrixMul_SNC_7_fu_239_As_ce0, grp_matrixMul_matrixMul_TRN_6_fu_249_As_ce0, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            As_ce0 <= grp_matrixMul_matrixMul_TRN_6_fu_249_As_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            As_ce0 <= grp_matrixMul_matrixMul_SNC_7_fu_239_As_ce0;
        else 
            As_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_address <= grp_matrixMul_matrixMul_TRN_6_fu_249_B_address;
    B_dataout <= grp_matrixMul_matrixMul_TRN_6_fu_249_B_dataout;
    B_req_din <= grp_matrixMul_matrixMul_TRN_6_fu_249_B_req_din;
    B_req_write <= grp_matrixMul_matrixMul_TRN_6_fu_249_B_req_write;
    B_rsp_read <= grp_matrixMul_matrixMul_TRN_6_fu_249_B_rsp_read;
    B_size <= grp_matrixMul_matrixMul_TRN_6_fu_249_B_size;

    Bs_address0_assign_proc : process(grp_matrixMul_matrixMul_SNC_7_fu_239_Bs_address0, grp_matrixMul_matrixMul_TRN_6_fu_249_Bs_address0, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            Bs_address0 <= grp_matrixMul_matrixMul_TRN_6_fu_249_Bs_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            Bs_address0 <= grp_matrixMul_matrixMul_SNC_7_fu_239_Bs_address0;
        else 
            Bs_address0 <= "XXXXXXXX";
        end if; 
    end process;


    Bs_ce0_assign_proc : process(grp_matrixMul_matrixMul_SNC_7_fu_239_Bs_ce0, grp_matrixMul_matrixMul_TRN_6_fu_249_Bs_ce0, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            Bs_ce0 <= grp_matrixMul_matrixMul_TRN_6_fu_249_Bs_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            Bs_ce0 <= grp_matrixMul_matrixMul_SNC_7_fu_239_Bs_ce0;
        else 
            Bs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_address <= grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_C_address;
    C_dataout <= grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_C_dataout;
    C_req_din <= grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_C_req_din;
    C_req_write <= grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_C_req_write;
    C_rsp_read <= grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_C_rsp_read;
    C_size <= grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_C_size;

    Csub_block_block0_address0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, grp_matrixMul_matrixMul_SNC_7_fu_239_Csub_block_address0, grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_Csub_block_block0_address0, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st10_fsm_9, tmp_35_cast_fu_395_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            Csub_block_block0_address0 <= tmp_35_cast_fu_395_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            Csub_block_block0_address0 <= grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_Csub_block_block0_address0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            Csub_block_block0_address0 <= grp_matrixMul_matrixMul_SNC_7_fu_239_Csub_block_address0;
        else 
            Csub_block_block0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    Csub_block_block0_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, grp_matrixMul_matrixMul_SNC_7_fu_239_Csub_block_ce0, grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_Csub_block_block0_ce0, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st10_fsm_9)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            Csub_block_block0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            Csub_block_block0_ce0 <= grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_Csub_block_block0_ce0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            Csub_block_block0_ce0 <= grp_matrixMul_matrixMul_SNC_7_fu_239_Csub_block_ce0;
        else 
            Csub_block_block0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Csub_block_block0_d0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, grp_matrixMul_matrixMul_SNC_7_fu_239_Csub_block_d0, ap_sig_cseq_ST_st10_fsm_9)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            Csub_block_block0_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            Csub_block_block0_d0 <= grp_matrixMul_matrixMul_SNC_7_fu_239_Csub_block_d0;
        else 
            Csub_block_block0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Csub_block_block0_we0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, grp_matrixMul_matrixMul_SNC_7_fu_239_Csub_block_we0, exitcond_i_fu_375_p2, ap_sig_cseq_ST_st10_fsm_9)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond_i_fu_375_p2)))) then 
            Csub_block_block0_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            Csub_block_block0_we0 <= grp_matrixMul_matrixMul_SNC_7_fu_239_Csub_block_we0;
        else 
            Csub_block_block0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    aEnd_block0_fu_319_p2 <= std_logic_vector(unsigned(wA) + unsigned(tmp1_fu_313_p2));
    a_block0_2_fu_307_p2 <= std_logic_vector(shift_left(unsigned(phi_mul_reg_151),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    a_block0_fu_405_p2 <= std_logic_vector(unsigned(a_block_reg_219) + unsigned(ap_const_lv32_10));

    ap_done_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_s_fu_296_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_s_fu_296_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_s_fu_296_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_s_fu_296_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_106_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_106 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_127_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_127 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_141_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_141 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_150_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_150 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_164_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_164 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_173_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_173 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_26_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_26 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_309_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_309 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    ap_sig_337_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_337 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    ap_sig_353_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_353 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_362_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_362 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_337)
    begin
        if (ap_sig_337) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_309)
    begin
        if (ap_sig_309) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_26)
    begin
        if (ap_sig_26) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_106)
    begin
        if (ap_sig_106) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_127)
    begin
        if (ap_sig_127) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_141)
    begin
        if (ap_sig_141) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_150)
    begin
        if (ap_sig_150) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_164)
    begin
        if (ap_sig_164) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_173)
    begin
        if (ap_sig_173) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_362)
    begin
        if (ap_sig_362) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_353)
    begin
        if (ap_sig_353) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    bStep_block0_fu_280_p2 <= std_logic_vector(shift_left(unsigned(wB),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    b_block0_2_fu_335_p2 <= std_logic_vector(shift_left(unsigned(blockIdx_loop_x_reg_174),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    b_block0_fu_411_p2 <= std_logic_vector(unsigned(bStep_block0_reg_477) + unsigned(b_block_reg_229));
    blockIdx_loop_y_fu_301_p2 <= std_logic_vector(unsigned(blockIdx_block0_y_reg_140) + unsigned(ap_const_lv32_1));
    c_block0_fu_422_p2 <= std_logic_vector(shift_left(unsigned(tmp_fu_416_p2),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    exitcond1_i_fu_352_p2 <= "1" when (threadIdx_y_reg_197 = blockDim_y) else "0";
    exitcond2_i_fu_341_p2 <= "1" when (threadIdx_2_i_reg_186 = blockDim_z) else "0";
    exitcond_i_fu_375_p2 <= "1" when (threadIdx_i_reg_208 = blockDim_x) else "0";
    grp_matrixMul_matrixMul_SNC_7_fu_239_ap_start <= ap_reg_grp_matrixMul_matrixMul_SNC_7_fu_239_ap_start;
    grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_ap_start <= ap_reg_grp_matrixMul_matrixMul_TRN_10_wrapper_fu_268_ap_start;
    grp_matrixMul_matrixMul_TRN_6_fu_249_ap_start <= ap_reg_grp_matrixMul_matrixMul_TRN_6_fu_249_ap_start;
    next_mul2_fu_286_p2 <= std_logic_vector(unsigned(phi_mul1_reg_162) + unsigned(wB));
    next_mul_fu_291_p2 <= std_logic_vector(unsigned(phi_mul_reg_151) + unsigned(wA));
    threadIdx_x_fu_380_p2 <= std_logic_vector(unsigned(threadIdx_i_reg_208) + unsigned(ap_const_lv32_1));
    threadIdx_z_fu_346_p2 <= std_logic_vector(unsigned(threadIdx_2_i_reg_186) + unsigned(ap_const_lv32_1));
    tmp1_fu_313_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(a_block0_2_fu_307_p2));
    tmp_12_fu_363_p1 <= threadIdx_y_reg_197(6 - 1 downto 0);
    tmp_13_fu_386_p1 <= threadIdx_i_reg_208(10 - 1 downto 0);
    tmp_16_fu_324_p2 <= "1" when (blockIdx_loop_x_reg_174 = gridDim_x) else "0";
    tmp_17_fu_329_p2 <= std_logic_vector(unsigned(blockIdx_loop_x_reg_174) + unsigned(ap_const_lv32_1));
    tmp_18_fu_400_p2 <= "1" when (signed(a_block_reg_219) > signed(aEnd_block0_reg_505)) else "0";
    tmp_19_fu_390_p2 <= std_logic_vector(unsigned(tmp_34_cast_reg_539) + unsigned(tmp_13_fu_386_p1));
    tmp_23_i_fu_357_p2 <= std_logic_vector(unsigned(threadIdx_y_reg_197) + unsigned(ap_const_lv32_1));
    tmp_34_cast_fu_367_p3 <= (tmp_12_fu_363_p1 & ap_const_lv4_0);
    tmp_35_cast_fu_395_p1 <= std_logic_vector(resize(unsigned(tmp_19_fu_390_p2),64));
    tmp_fu_416_p2 <= std_logic_vector(unsigned(phi_mul1_reg_162) + unsigned(blockIdx_loop_x_reg_174));
    tmp_s_fu_296_p2 <= "1" when (blockIdx_block0_y_reg_140 = gridDim_y) else "0";
end behav;
