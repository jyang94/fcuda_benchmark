-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixMul_matrixMul_TRN_6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    blockDim_x : IN STD_LOGIC_VECTOR (31 downto 0);
    blockDim_y : IN STD_LOGIC_VECTOR (31 downto 0);
    blockDim_z : IN STD_LOGIC_VECTOR (31 downto 0);
    As_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    As_ce0 : OUT STD_LOGIC;
    As_we0 : OUT STD_LOGIC;
    As_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_req_din : OUT STD_LOGIC;
    A_req_full_n : IN STD_LOGIC;
    A_req_write : OUT STD_LOGIC;
    A_rsp_empty_n : IN STD_LOGIC;
    A_rsp_read : OUT STD_LOGIC;
    A_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    A_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    A_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_r : IN STD_LOGIC_VECTOR (31 downto 0);
    wA : IN STD_LOGIC_VECTOR (31 downto 0);
    Bs_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Bs_ce0 : OUT STD_LOGIC;
    Bs_we0 : OUT STD_LOGIC;
    Bs_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_req_din : OUT STD_LOGIC;
    B_req_full_n : IN STD_LOGIC;
    B_req_write : OUT STD_LOGIC;
    B_rsp_empty_n : IN STD_LOGIC;
    B_rsp_read : OUT STD_LOGIC;
    B_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    B_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_r : IN STD_LOGIC_VECTOR (31 downto 0);
    wB : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of matrixMul_matrixMul_TRN_6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_24 : BOOLEAN;
    signal threadIdx_z_fu_196_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal threadIdx_z_reg_329 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_100 : BOOLEAN;
    signal next_mul1_fu_202_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul1_reg_334 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_109 : BOOLEAN;
    signal next_mul_fu_207_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_reg_339 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_217_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_347 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_223_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_reg_352 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond1_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_227_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_357 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_232_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_362 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_132 : BOOLEAN;
    signal tmp_5_cast_fu_257_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_cast_reg_379 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_143 : BOOLEAN;
    signal threadIdx_x_fu_269_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal threadIdx_x_reg_387 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_152 : BOOLEAN;
    signal exitcond_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_161 : BOOLEAN;
    signal A_addr_read_reg_392 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_279_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_reg_397 : STD_LOGIC_VECTOR (9 downto 0);
    signal B_addr_read_reg_402 : STD_LOGIC_VECTOR (31 downto 0);
    signal threadIdx_2_reg_136 : STD_LOGIC_VECTOR (31 downto 0);
    signal threadIdx_y_reg_147 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_mul1_reg_169 : STD_LOGIC_VECTOR (31 downto 0);
    signal threadIdx_reg_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_193 : BOOLEAN;
    signal tmp_14_cast_fu_284_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_237_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_240_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_275_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    phi_mul1_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not(ap_sig_161) and not((ap_const_lv1_0 = exitcond_fu_264_p2)))) then 
                phi_mul1_reg_169 <= next_mul1_reg_334;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond2_fu_191_p2))) then 
                phi_mul1_reg_169 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not(ap_sig_161) and not((ap_const_lv1_0 = exitcond_fu_264_p2)))) then 
                phi_mul_reg_158 <= next_mul_reg_339;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond2_fu_191_p2))) then 
                phi_mul_reg_158 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    threadIdx_2_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond1_fu_212_p2 = ap_const_lv1_0)))) then 
                threadIdx_2_reg_136 <= threadIdx_z_reg_329;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                threadIdx_2_reg_136 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    threadIdx_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                threadIdx_reg_180 <= threadIdx_x_reg_387;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                threadIdx_reg_180 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    threadIdx_y_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not(ap_sig_161) and not((ap_const_lv1_0 = exitcond_fu_264_p2)))) then 
                threadIdx_y_reg_147 <= tmp_1_reg_347;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond2_fu_191_p2))) then 
                threadIdx_y_reg_147 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond_fu_264_p2) and not(ap_sig_161))) then
                A_addr_read_reg_392 <= A_datain;
                B_addr_read_reg_402 <= B_datain;
                tmp_5_reg_397 <= tmp_5_fu_279_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                next_mul1_reg_334 <= next_mul1_fu_202_p2;
                next_mul_reg_339 <= next_mul_fu_207_p2;
                tmp_1_reg_347 <= tmp_1_fu_217_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not(ap_sig_161))) then
                threadIdx_x_reg_387 <= threadIdx_x_fu_269_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                threadIdx_z_reg_329 <= threadIdx_z_fu_196_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond1_fu_212_p2 = ap_const_lv1_0))) then
                tmp_2_reg_362 <= tmp_2_fu_232_p2;
                tmp_7_reg_357 <= tmp_7_fu_227_p2;
                tmp_reg_352 <= tmp_fu_223_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                    tmp_5_cast_reg_379(9 downto 4) <= tmp_5_cast_fu_257_p3(9 downto 4);
            end if;
        end if;
    end process;
    tmp_5_cast_reg_379(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond1_fu_212_p2, exitcond_fu_264_p2, ap_sig_161, exitcond2_fu_191_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_191_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((exitcond1_fu_212_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                if (((ap_const_lv1_0 = exitcond_fu_264_p2) and not(ap_sig_161))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                elsif ((not(ap_sig_161) and not((ap_const_lv1_0 = exitcond_fu_264_p2)))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    A_address <= tmp_s_fu_237_p1(32 - 1 downto 0);
    A_dataout <= ap_const_lv32_0;
    A_req_din <= ap_const_logic_0;

    A_req_write_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            A_req_write <= ap_const_logic_1;
        else 
            A_req_write <= ap_const_logic_0;
        end if; 
    end process;


    A_rsp_read_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, exitcond_fu_264_p2, ap_sig_161)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond_fu_264_p2) and not(ap_sig_161))) then 
            A_rsp_read <= ap_const_logic_1;
        else 
            A_rsp_read <= ap_const_logic_0;
        end if; 
    end process;

    A_size <= blockDim_x;
    As_address0 <= tmp_14_cast_fu_284_p1(8 - 1 downto 0);

    As_ce0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            As_ce0 <= ap_const_logic_1;
        else 
            As_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    As_d0 <= A_addr_read_reg_392;

    As_we0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            As_we0 <= ap_const_logic_1;
        else 
            As_we0 <= ap_const_logic_0;
        end if; 
    end process;

    B_address <= tmp_3_fu_240_p1(32 - 1 downto 0);
    B_dataout <= ap_const_lv32_0;
    B_req_din <= ap_const_logic_0;

    B_req_write_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            B_req_write <= ap_const_logic_1;
        else 
            B_req_write <= ap_const_logic_0;
        end if; 
    end process;


    B_rsp_read_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, exitcond_fu_264_p2, ap_sig_161)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond_fu_264_p2) and not(ap_sig_161))) then 
            B_rsp_read <= ap_const_logic_1;
        else 
            B_rsp_read <= ap_const_logic_0;
        end if; 
    end process;

    B_size <= blockDim_x;
    Bs_address0 <= tmp_14_cast_fu_284_p1(8 - 1 downto 0);

    Bs_ce0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            Bs_ce0 <= ap_const_logic_1;
        else 
            Bs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Bs_d0 <= B_addr_read_reg_402;

    Bs_we0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            Bs_we0 <= ap_const_logic_1;
        else 
            Bs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, exitcond2_fu_191_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond2_fu_191_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond2_fu_191_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond2_fu_191_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_100_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_100 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_109_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_109 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_132_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_132 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_143_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_143 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_152_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_152 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_161_assign_proc : process(A_rsp_empty_n, B_rsp_empty_n, exitcond_fu_264_p2)
    begin
                ap_sig_161 <= (((A_rsp_empty_n = ap_const_logic_0) and (ap_const_lv1_0 = exitcond_fu_264_p2)) or ((ap_const_lv1_0 = exitcond_fu_264_p2) and (B_rsp_empty_n = ap_const_logic_0)));
    end process;


    ap_sig_193_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_193 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_24_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_24 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_24)
    begin
        if (ap_sig_24) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_100)
    begin
        if (ap_sig_100) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_109)
    begin
        if (ap_sig_109) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_132)
    begin
        if (ap_sig_132) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_143)
    begin
        if (ap_sig_143) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_152)
    begin
        if (ap_sig_152) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_193)
    begin
        if (ap_sig_193) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_212_p2 <= "1" when (threadIdx_y_reg_147 = blockDim_y) else "0";
    exitcond2_fu_191_p2 <= "1" when (threadIdx_2_reg_136 = blockDim_z) else "0";
    exitcond_fu_264_p2 <= "1" when (threadIdx_reg_180 = blockDim_x) else "0";
    next_mul1_fu_202_p2 <= std_logic_vector(unsigned(phi_mul1_reg_169) + unsigned(wB));
    next_mul_fu_207_p2 <= std_logic_vector(unsigned(phi_mul_reg_158) + unsigned(wA));
    threadIdx_x_fu_269_p2 <= std_logic_vector(unsigned(threadIdx_reg_180) + unsigned(ap_const_lv32_1));
    threadIdx_z_fu_196_p2 <= std_logic_vector(unsigned(threadIdx_2_reg_136) + unsigned(ap_const_lv32_1));
    tmp_14_cast_fu_284_p1 <= std_logic_vector(resize(unsigned(tmp_5_reg_397),64));
    tmp_1_fu_217_p2 <= std_logic_vector(unsigned(threadIdx_y_reg_147) + unsigned(ap_const_lv32_1));
    tmp_2_fu_232_p2 <= std_logic_vector(unsigned(phi_mul1_reg_169) + unsigned(b_r));
    tmp_3_fu_240_p1 <= std_logic_vector(resize(unsigned(tmp_2_reg_362),64));
    tmp_4_fu_275_p1 <= threadIdx_reg_180(10 - 1 downto 0);
    tmp_5_cast_fu_257_p3 <= (tmp_reg_352 & ap_const_lv4_0);
    tmp_5_fu_279_p2 <= std_logic_vector(unsigned(tmp_5_cast_reg_379) + unsigned(tmp_4_fu_275_p1));
    tmp_7_fu_227_p2 <= std_logic_vector(unsigned(phi_mul_reg_158) + unsigned(a_r));
    tmp_fu_223_p1 <= threadIdx_y_reg_147(6 - 1 downto 0);
    tmp_s_fu_237_p1 <= std_logic_vector(resize(unsigned(tmp_7_reg_357),64));
end behav;
