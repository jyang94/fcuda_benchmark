-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixMul_matrixMul_SNC_7 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    blockDim_x : IN STD_LOGIC_VECTOR (31 downto 0);
    blockDim_y : IN STD_LOGIC_VECTOR (31 downto 0);
    blockDim_z : IN STD_LOGIC_VECTOR (31 downto 0);
    Csub_block_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Csub_block_ce0 : OUT STD_LOGIC;
    Csub_block_we0 : OUT STD_LOGIC;
    Csub_block_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Csub_block_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    As_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    As_ce0 : OUT STD_LOGIC;
    As_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Bs_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Bs_ce0 : OUT STD_LOGIC;
    Bs_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of matrixMul_matrixMul_SNC_7 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_32 : BOOLEAN;
    signal threadIdx_z_fu_158_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal threadIdx_z_reg_278 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_76 : BOOLEAN;
    signal tmp_s_fu_169_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_286 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_85 : BOOLEAN;
    signal tmp_23_cast_fu_179_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_23_cast_reg_291 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond2_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_192_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_300 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_100 : BOOLEAN;
    signal tmp_7_fu_198_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_reg_305 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond1_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Csub_block_addr_reg_310 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_1_fu_218_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_1_reg_318 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_116 : BOOLEAN;
    signal exitcond_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_131 : BOOLEAN;
    signal grp_fu_147_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_343 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_141 : BOOLEAN;
    signal Csub_block_load_reg_348 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_143_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_reg_353 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_151 : BOOLEAN;
    signal threadIdx_2_reg_99 : STD_LOGIC_VECTOR (31 downto 0);
    signal threadIdx_y_reg_110 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_fu_153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal threadIdx_x_reg_121 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_132 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_176 : BOOLEAN;
    signal tmp_24_cast_fu_207_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_cast_fu_233_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_cast_fu_255_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_186 : BOOLEAN;
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_197 : BOOLEAN;
    signal tmp_6_fu_175_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_10_fu_202_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_19_cast_fu_224_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_fu_228_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_12_fu_238_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_27_cast_fu_246_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_13_fu_250_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);

    component matrixMul_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrixMul_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    matrixMul_fadd_32ns_32ns_32_5_full_dsp_U12 : component matrixMul_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Csub_block_load_reg_348,
        din1 => tmp_14_reg_343,
        ce => ap_const_logic_1,
        dout => grp_fu_143_p2);

    matrixMul_fmul_32ns_32ns_32_4_max_dsp_U13 : component matrixMul_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => As_q0,
        din1 => Bs_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_147_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    k_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
                k_reg_132 <= k_1_reg_318;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond1_fu_187_p2))) then 
                k_reg_132 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    threadIdx_2_reg_99_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond2_fu_164_p2 = ap_const_lv1_0)))) then 
                threadIdx_2_reg_99 <= threadIdx_z_reg_278;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                threadIdx_2_reg_99 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    threadIdx_x_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond2_fu_164_p2 = ap_const_lv1_0))) then 
                threadIdx_x_reg_121 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond_fu_212_p2)))) then 
                threadIdx_x_reg_121 <= tmp_9_reg_300;
            end if; 
        end if;
    end process;

    threadIdx_y_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond1_fu_187_p2)))) then 
                threadIdx_y_reg_110 <= tmp_s_reg_286;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond3_fu_153_p2))) then 
                threadIdx_y_reg_110 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond1_fu_187_p2))) then
                Csub_block_addr_reg_310 <= tmp_24_cast_fu_207_p1(8 - 1 downto 0);
                tmp_7_reg_305 <= tmp_7_fu_198_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                Csub_block_load_reg_348 <= Csub_block_q0;
                tmp_14_reg_343 <= grp_fu_147_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                k_1_reg_318 <= k_1_fu_218_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                threadIdx_z_reg_278 <= threadIdx_z_fu_158_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then
                tmp_15_reg_353 <= grp_fu_143_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond2_fu_164_p2 = ap_const_lv1_0))) then
                    tmp_23_cast_reg_291(9 downto 4) <= tmp_23_cast_fu_179_p3(9 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                tmp_9_reg_300 <= tmp_9_fu_192_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                tmp_s_reg_286 <= tmp_s_fu_169_p2;
            end if;
        end if;
    end process;
    tmp_23_cast_reg_291(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond2_fu_164_p2, exitcond1_fu_187_p2, exitcond_fu_212_p2, exitcond3_fu_153_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_153_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((exitcond2_fu_164_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st4_fsm_3 => 
                if ((ap_const_lv1_0 = exitcond1_fu_187_p2)) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_lv1_0 = exitcond_fu_212_p2))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    As_address0 <= tmp_25_cast_fu_233_p1(8 - 1 downto 0);

    As_ce0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            As_ce0 <= ap_const_logic_1;
        else 
            As_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Bs_address0 <= tmp_28_cast_fu_255_p1(8 - 1 downto 0);

    Bs_ce0_assign_proc : process(ap_sig_cseq_ST_st5_fsm_4)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            Bs_ce0 <= ap_const_logic_1;
        else 
            Bs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Csub_block_address0 <= Csub_block_addr_reg_310;

    Csub_block_ce0_assign_proc : process(ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7))) then 
            Csub_block_ce0 <= ap_const_logic_1;
        else 
            Csub_block_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Csub_block_d0 <= tmp_15_reg_353;

    Csub_block_we0_assign_proc : process(ap_sig_cseq_ST_st15_fsm_14)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14))) then 
            Csub_block_we0 <= ap_const_logic_1;
        else 
            Csub_block_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, exitcond3_fu_153_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond3_fu_153_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond3_fu_153_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond3_fu_153_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_100_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_100 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_116_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_116 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_131_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_131 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_141_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_141 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_151_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_151 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    ap_sig_176_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_176 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    ap_sig_186_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_186 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_197_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_197 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    ap_sig_32_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_32 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_76_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_76 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_85_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_85 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_197)
    begin
        if (ap_sig_197) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_151)
    begin
        if (ap_sig_151) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_176)
    begin
        if (ap_sig_176) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_32)
    begin
        if (ap_sig_32) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_76)
    begin
        if (ap_sig_76) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_85)
    begin
        if (ap_sig_85) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_100)
    begin
        if (ap_sig_100) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_116)
    begin
        if (ap_sig_116) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_131)
    begin
        if (ap_sig_131) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_186)
    begin
        if (ap_sig_186) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_141)
    begin
        if (ap_sig_141) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_187_p2 <= "1" when (threadIdx_x_reg_121 = blockDim_x) else "0";
    exitcond2_fu_164_p2 <= "1" when (threadIdx_y_reg_110 = blockDim_y) else "0";
    exitcond3_fu_153_p2 <= "1" when (threadIdx_2_reg_99 = blockDim_z) else "0";
    exitcond_fu_212_p2 <= "1" when (k_reg_132 = ap_const_lv5_10) else "0";
    k_1_fu_218_p2 <= std_logic_vector(unsigned(k_reg_132) + unsigned(ap_const_lv5_1));
    threadIdx_z_fu_158_p2 <= std_logic_vector(unsigned(threadIdx_2_reg_99) + unsigned(ap_const_lv32_1));
    tmp_10_fu_202_p2 <= std_logic_vector(unsigned(tmp_23_cast_reg_291) + unsigned(tmp_7_fu_198_p1));
    tmp_11_fu_228_p2 <= std_logic_vector(unsigned(tmp_19_cast_fu_224_p1) + unsigned(tmp_23_cast_reg_291));
    tmp_12_fu_238_p3 <= (k_reg_132 & ap_const_lv4_0);
    tmp_13_fu_250_p2 <= std_logic_vector(unsigned(tmp_7_reg_305) + unsigned(tmp_27_cast_fu_246_p1));
    tmp_19_cast_fu_224_p1 <= std_logic_vector(resize(unsigned(k_reg_132),10));
    tmp_23_cast_fu_179_p3 <= (tmp_6_fu_175_p1 & ap_const_lv4_0);
    tmp_24_cast_fu_207_p1 <= std_logic_vector(resize(unsigned(tmp_10_fu_202_p2),64));
    tmp_25_cast_fu_233_p1 <= std_logic_vector(resize(unsigned(tmp_11_fu_228_p2),64));
    tmp_27_cast_fu_246_p1 <= std_logic_vector(resize(unsigned(tmp_12_fu_238_p3),10));
    tmp_28_cast_fu_255_p1 <= std_logic_vector(resize(unsigned(tmp_13_fu_250_p2),64));
    tmp_6_fu_175_p1 <= threadIdx_y_reg_110(6 - 1 downto 0);
    tmp_7_fu_198_p1 <= threadIdx_x_reg_121(10 - 1 downto 0);
    tmp_9_fu_192_p2 <= std_logic_vector(unsigned(threadIdx_x_reg_121) + unsigned(ap_const_lv32_1));
    tmp_s_fu_169_p2 <= std_logic_vector(unsigned(threadIdx_y_reg_110) + unsigned(ap_const_lv32_1));
end behav;
