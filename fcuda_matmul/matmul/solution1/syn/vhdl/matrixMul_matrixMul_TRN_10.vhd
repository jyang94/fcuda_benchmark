-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixMul_matrixMul_TRN_10 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    blockDim_x : IN STD_LOGIC_VECTOR (31 downto 0);
    blockDim_y : IN STD_LOGIC_VECTOR (31 downto 0);
    blockDim_z : IN STD_LOGIC_VECTOR (31 downto 0);
    C_req_din : OUT STD_LOGIC;
    C_req_full_n : IN STD_LOGIC;
    C_req_write : OUT STD_LOGIC;
    C_rsp_empty_n : IN STD_LOGIC;
    C_rsp_read : OUT STD_LOGIC;
    C_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    C_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    Csub_block_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Csub_block_ce0 : OUT STD_LOGIC;
    Csub_block_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    c_r : IN STD_LOGIC_VECTOR (31 downto 0);
    wB : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of matrixMul_matrixMul_TRN_10 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_23 : BOOLEAN;
    signal threadIdx_z_fu_136_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal threadIdx_z_reg_245 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_72 : BOOLEAN;
    signal next_mul_fu_142_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul_reg_250 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_81 : BOOLEAN;
    signal tmp_6_fu_152_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_258 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_cast_fu_162_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_17_cast_reg_263 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond1_fu_147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal C_addr_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal threadIdx_x_fu_190_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal threadIdx_x_reg_276 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_100 : BOOLEAN;
    signal exitcond_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_0iter_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_0iter_reg_286 : STD_LOGIC_VECTOR (0 downto 0);
    signal Csub_block_load_reg_290 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_115 : BOOLEAN;
    signal threadIdx_2_reg_87 : STD_LOGIC_VECTOR (31 downto 0);
    signal threadIdx_y_reg_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_fu_131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_109 : STD_LOGIC_VECTOR (31 downto 0);
    signal threadIdx_reg_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_137 : BOOLEAN;
    signal tmp_19_cast_fu_205_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_175_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_158_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_170_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_196_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_200_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    phi_mul_reg_109_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond_fu_185_p2)))) then 
                phi_mul_reg_109 <= next_mul_reg_250;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond2_fu_131_p2))) then 
                phi_mul_reg_109 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    threadIdx_2_reg_87_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond1_fu_147_p2 = ap_const_lv1_0)))) then 
                threadIdx_2_reg_87 <= threadIdx_z_reg_245;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                threadIdx_2_reg_87 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    threadIdx_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((C_req_full_n = ap_const_logic_0)))) then 
                threadIdx_reg_120 <= threadIdx_x_reg_276;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond1_fu_147_p2 = ap_const_lv1_0))) then 
                threadIdx_reg_120 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    threadIdx_y_reg_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond_fu_185_p2)))) then 
                threadIdx_y_reg_98 <= tmp_6_reg_258;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond2_fu_131_p2))) then 
                threadIdx_y_reg_98 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond1_fu_147_p2 = ap_const_lv1_0))) then
                C_addr_reg_268 <= tmp_7_fu_175_p1(32 - 1 downto 0);
                    tmp_17_cast_reg_263(9 downto 4) <= tmp_17_cast_fu_162_p3(9 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                Csub_block_load_reg_290 <= Csub_block_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond_fu_185_p2))) then
                is_0iter_reg_286 <= is_0iter_fu_210_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                next_mul_reg_250 <= next_mul_fu_142_p2;
                tmp_6_reg_258 <= tmp_6_fu_152_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                threadIdx_x_reg_276 <= threadIdx_x_fu_190_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                threadIdx_z_reg_245 <= threadIdx_z_fu_136_p2;
            end if;
        end if;
    end process;
    tmp_17_cast_reg_263(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, C_req_full_n, exitcond1_fu_147_p2, exitcond_fu_185_p2, exitcond2_fu_131_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_131_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((exitcond1_fu_147_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st4_fsm_3 => 
                if ((ap_const_lv1_0 = exitcond_fu_185_p2)) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                if (not((C_req_full_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    C_address <= C_addr_reg_268;
    C_dataout <= Csub_block_load_reg_290;

    C_req_din_assign_proc : process(C_req_full_n, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((C_req_full_n = ap_const_logic_0))))) then 
            C_req_din <= ap_const_logic_1;
        else 
            C_req_din <= ap_const_logic_0;
        end if; 
    end process;


    C_req_write_assign_proc : process(C_req_full_n, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((C_req_full_n = ap_const_logic_0))))) then 
            C_req_write <= ap_const_logic_1;
        else 
            C_req_write <= ap_const_logic_0;
        end if; 
    end process;

    C_rsp_read <= ap_const_logic_0;
    C_size <= blockDim_x;
    Csub_block_address0 <= tmp_19_cast_fu_205_p1(8 - 1 downto 0);

    Csub_block_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            Csub_block_ce0 <= ap_const_logic_1;
        else 
            Csub_block_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, exitcond2_fu_131_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond2_fu_131_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond2_fu_131_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond2_fu_131_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_100_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_100 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_115_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_115 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_137_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_137 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_23_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_23 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_72_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_72 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_81_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_81 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_23)
    begin
        if (ap_sig_23) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_72)
    begin
        if (ap_sig_72) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_81)
    begin
        if (ap_sig_81) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_100)
    begin
        if (ap_sig_100) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_115)
    begin
        if (ap_sig_115) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_137)
    begin
        if (ap_sig_137) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_147_p2 <= "1" when (threadIdx_y_reg_98 = blockDim_y) else "0";
    exitcond2_fu_131_p2 <= "1" when (threadIdx_2_reg_87 = blockDim_z) else "0";
    exitcond_fu_185_p2 <= "1" when (threadIdx_reg_120 = blockDim_x) else "0";
    is_0iter_fu_210_p2 <= "1" when (threadIdx_reg_120 = ap_const_lv32_0) else "0";
    next_mul_fu_142_p2 <= std_logic_vector(unsigned(phi_mul_reg_109) + unsigned(wB));
    threadIdx_x_fu_190_p2 <= std_logic_vector(unsigned(threadIdx_reg_120) + unsigned(ap_const_lv32_1));
    threadIdx_z_fu_136_p2 <= std_logic_vector(unsigned(threadIdx_2_reg_87) + unsigned(ap_const_lv32_1));
    tmp_17_cast_fu_162_p3 <= (tmp_fu_158_p1 & ap_const_lv4_0);
    tmp_19_cast_fu_205_p1 <= std_logic_vector(resize(unsigned(tmp_8_fu_200_p2),64));
    tmp_5_fu_196_p1 <= threadIdx_reg_120(10 - 1 downto 0);
    tmp_6_fu_152_p2 <= std_logic_vector(unsigned(threadIdx_y_reg_98) + unsigned(ap_const_lv32_1));
    tmp_7_fu_175_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_170_p2),64));
    tmp_8_fu_200_p2 <= std_logic_vector(unsigned(tmp_17_cast_reg_263) + unsigned(tmp_5_fu_196_p1));
    tmp_fu_158_p1 <= threadIdx_y_reg_98(6 - 1 downto 0);
    tmp_s_fu_170_p2 <= std_logic_vector(unsigned(phi_mul_reg_109) + unsigned(c_r));
end behav;
