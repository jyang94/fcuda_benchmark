// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module matrixMul_matrixMul_TRN_6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        blockDim_x,
        blockDim_y,
        blockDim_z,
        As_address0,
        As_ce0,
        As_we0,
        As_d0,
        A_req_din,
        A_req_full_n,
        A_req_write,
        A_rsp_empty_n,
        A_rsp_read,
        A_address,
        A_datain,
        A_dataout,
        A_size,
        a_r,
        wA,
        Bs_address0,
        Bs_ce0,
        Bs_we0,
        Bs_d0,
        B_req_din,
        B_req_full_n,
        B_req_write,
        B_rsp_empty_n,
        B_rsp_read,
        B_address,
        B_datain,
        B_dataout,
        B_size,
        b_r,
        wB
);

parameter    ap_ST_st1_fsm_0 = 7'b1;
parameter    ap_ST_st2_fsm_1 = 7'b10;
parameter    ap_ST_st3_fsm_2 = 7'b100;
parameter    ap_ST_st4_fsm_3 = 7'b1000;
parameter    ap_ST_st5_fsm_4 = 7'b10000;
parameter    ap_ST_st6_fsm_5 = 7'b100000;
parameter    ap_ST_st7_fsm_6 = 7'b1000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv4_0 = 4'b0000;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] blockDim_x;
input  [31:0] blockDim_y;
input  [31:0] blockDim_z;
output  [7:0] As_address0;
output   As_ce0;
output   As_we0;
output  [31:0] As_d0;
output   A_req_din;
input   A_req_full_n;
output   A_req_write;
input   A_rsp_empty_n;
output   A_rsp_read;
output  [31:0] A_address;
input  [31:0] A_datain;
output  [31:0] A_dataout;
output  [31:0] A_size;
input  [31:0] a_r;
input  [31:0] wA;
output  [7:0] Bs_address0;
output   Bs_ce0;
output   Bs_we0;
output  [31:0] Bs_d0;
output   B_req_din;
input   B_req_full_n;
output   B_req_write;
input   B_rsp_empty_n;
output   B_rsp_read;
output  [31:0] B_address;
input  [31:0] B_datain;
output  [31:0] B_dataout;
output  [31:0] B_size;
input  [31:0] b_r;
input  [31:0] wB;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg As_ce0;
reg As_we0;
reg A_req_write;
reg A_rsp_read;
reg Bs_ce0;
reg Bs_we0;
reg B_req_write;
reg B_rsp_read;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_24;
wire   [31:0] threadIdx_z_fu_196_p2;
reg   [31:0] threadIdx_z_reg_329;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_100;
wire   [31:0] next_mul1_fu_202_p2;
reg   [31:0] next_mul1_reg_334;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_109;
wire   [31:0] next_mul_fu_207_p2;
reg   [31:0] next_mul_reg_339;
wire   [31:0] tmp_1_fu_217_p2;
reg   [31:0] tmp_1_reg_347;
wire   [5:0] tmp_fu_223_p1;
reg   [5:0] tmp_reg_352;
wire   [0:0] exitcond1_fu_212_p2;
wire   [31:0] tmp_7_fu_227_p2;
reg   [31:0] tmp_7_reg_357;
wire   [31:0] tmp_2_fu_232_p2;
reg   [31:0] tmp_2_reg_362;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_132;
wire   [9:0] tmp_5_cast_fu_257_p3;
reg   [9:0] tmp_5_cast_reg_379;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_143;
wire   [31:0] threadIdx_x_fu_269_p2;
reg   [31:0] threadIdx_x_reg_387;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_152;
wire   [0:0] exitcond_fu_264_p2;
reg    ap_sig_161;
reg   [31:0] A_addr_read_reg_392;
wire   [9:0] tmp_5_fu_279_p2;
reg   [9:0] tmp_5_reg_397;
reg   [31:0] B_addr_read_reg_402;
reg   [31:0] threadIdx_2_reg_136;
reg   [31:0] threadIdx_y_reg_147;
wire   [0:0] exitcond2_fu_191_p2;
reg   [31:0] phi_mul_reg_158;
reg   [31:0] phi_mul1_reg_169;
reg   [31:0] threadIdx_reg_180;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_193;
wire   [63:0] tmp_14_cast_fu_284_p1;
wire   [63:0] tmp_s_fu_237_p1;
wire   [63:0] tmp_3_fu_240_p1;
wire   [9:0] tmp_4_fu_275_p1;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'b1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & ~ap_sig_161 & ~(1'b0 == exitcond_fu_264_p2))) begin
        phi_mul1_reg_169 <= next_mul1_reg_334;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond2_fu_191_p2))) begin
        phi_mul1_reg_169 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & ~ap_sig_161 & ~(1'b0 == exitcond_fu_264_p2))) begin
        phi_mul_reg_158 <= next_mul_reg_339;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond2_fu_191_p2))) begin
        phi_mul_reg_158 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(exitcond1_fu_212_p2 == 1'b0))) begin
        threadIdx_2_reg_136 <= threadIdx_z_reg_329;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        threadIdx_2_reg_136 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        threadIdx_reg_180 <= threadIdx_x_reg_387;
    end else if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        threadIdx_reg_180 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & ~ap_sig_161 & ~(1'b0 == exitcond_fu_264_p2))) begin
        threadIdx_y_reg_147 <= tmp_1_reg_347;
    end else if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond2_fu_191_p2))) begin
        threadIdx_y_reg_147 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & (1'b0 == exitcond_fu_264_p2) & ~ap_sig_161)) begin
        A_addr_read_reg_392 <= A_datain;
        B_addr_read_reg_402 <= B_datain;
        tmp_5_reg_397 <= tmp_5_fu_279_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        next_mul1_reg_334 <= next_mul1_fu_202_p2;
        next_mul_reg_339 <= next_mul_fu_207_p2;
        tmp_1_reg_347 <= tmp_1_fu_217_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & ~ap_sig_161)) begin
        threadIdx_x_reg_387 <= threadIdx_x_fu_269_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        threadIdx_z_reg_329 <= threadIdx_z_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & (exitcond1_fu_212_p2 == 1'b0))) begin
        tmp_2_reg_362 <= tmp_2_fu_232_p2;
        tmp_7_reg_357 <= tmp_7_fu_227_p2;
        tmp_reg_352 <= tmp_fu_223_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        tmp_5_cast_reg_379[9 : 4] <= tmp_5_cast_fu_257_p3[9 : 4];
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        A_req_write = 1'b1;
    end else begin
        A_req_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & (1'b0 == exitcond_fu_264_p2) & ~ap_sig_161)) begin
        A_rsp_read = 1'b1;
    end else begin
        A_rsp_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        As_ce0 = 1'b1;
    end else begin
        As_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        As_we0 = 1'b1;
    end else begin
        As_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        B_req_write = 1'b1;
    end else begin
        B_req_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st6_fsm_5) & (1'b0 == exitcond_fu_264_p2) & ~ap_sig_161)) begin
        B_rsp_read = 1'b1;
    end else begin
        B_rsp_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        Bs_ce0 = 1'b1;
    end else begin
        Bs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        Bs_we0 = 1'b1;
    end else begin
        Bs_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)) | ((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == exitcond2_fu_191_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == exitcond2_fu_191_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_24) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_100) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_109) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_132) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_143) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_152) begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_193) begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (~(1'b0 == exitcond2_fu_191_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : begin
            if ((exitcond1_fu_212_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : begin
            if (((1'b0 == exitcond_fu_264_p2) & ~ap_sig_161)) begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end else if ((~ap_sig_161 & ~(1'b0 == exitcond_fu_264_p2))) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end
        end
        ap_ST_st7_fsm_6 : begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address = tmp_s_fu_237_p1;

assign A_dataout = ap_const_lv32_0;

assign A_req_din = 1'b0;

assign A_size = blockDim_x;

assign As_address0 = tmp_14_cast_fu_284_p1;

assign As_d0 = A_addr_read_reg_392;

assign B_address = tmp_3_fu_240_p1;

assign B_dataout = ap_const_lv32_0;

assign B_req_din = 1'b0;

assign B_size = blockDim_x;

assign Bs_address0 = tmp_14_cast_fu_284_p1;

assign Bs_d0 = B_addr_read_reg_402;

always @ (*) begin
    ap_sig_100 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_109 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_132 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_143 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_152 = (1'b1 == ap_CS_fsm[ap_const_lv32_5]);
end

always @ (*) begin
    ap_sig_161 = (((A_rsp_empty_n == 1'b0) & (1'b0 == exitcond_fu_264_p2)) | ((1'b0 == exitcond_fu_264_p2) & (B_rsp_empty_n == 1'b0)));
end

always @ (*) begin
    ap_sig_193 = (1'b1 == ap_CS_fsm[ap_const_lv32_6]);
end

always @ (*) begin
    ap_sig_24 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

assign exitcond1_fu_212_p2 = ((threadIdx_y_reg_147 == blockDim_y) ? 1'b1 : 1'b0);

assign exitcond2_fu_191_p2 = ((threadIdx_2_reg_136 == blockDim_z) ? 1'b1 : 1'b0);

assign exitcond_fu_264_p2 = ((threadIdx_reg_180 == blockDim_x) ? 1'b1 : 1'b0);

assign next_mul1_fu_202_p2 = (phi_mul1_reg_169 + wB);

assign next_mul_fu_207_p2 = (phi_mul_reg_158 + wA);

assign threadIdx_x_fu_269_p2 = (threadIdx_reg_180 + ap_const_lv32_1);

assign threadIdx_z_fu_196_p2 = (threadIdx_2_reg_136 + ap_const_lv32_1);

assign tmp_14_cast_fu_284_p1 = tmp_5_reg_397;

assign tmp_1_fu_217_p2 = (threadIdx_y_reg_147 + ap_const_lv32_1);

assign tmp_2_fu_232_p2 = (phi_mul1_reg_169 + b_r);

assign tmp_3_fu_240_p1 = tmp_2_reg_362;

assign tmp_4_fu_275_p1 = threadIdx_reg_180[9:0];

assign tmp_5_cast_fu_257_p3 = {{tmp_reg_352}, {ap_const_lv4_0}};

assign tmp_5_fu_279_p2 = (tmp_5_cast_reg_379 + tmp_4_fu_275_p1);

assign tmp_7_fu_227_p2 = (phi_mul_reg_158 + a_r);

assign tmp_fu_223_p1 = threadIdx_y_reg_147[5:0];

assign tmp_s_fu_237_p1 = tmp_7_reg_357;

always @ (posedge ap_clk) begin
    tmp_5_cast_reg_379[3:0] <= 4'b0000;
end

endmodule //matrixMul_matrixMul_TRN_6
