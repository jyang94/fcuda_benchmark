// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module matrixMul_matrixMul_TRN_10_wrapper (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        blockDim_x,
        blockDim_y,
        blockDim_z,
        C_req_din,
        C_req_full_n,
        C_req_write,
        C_rsp_empty_n,
        C_rsp_read,
        C_address,
        C_datain,
        C_dataout,
        C_size,
        Csub_block_block0_address0,
        Csub_block_block0_ce0,
        Csub_block_block0_q0,
        c_block0,
        wB
);

parameter    ap_ST_st1_fsm_0 = 2'b1;
parameter    ap_ST_st2_fsm_1 = 2'b10;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] blockDim_x;
input  [31:0] blockDim_y;
input  [31:0] blockDim_z;
output   C_req_din;
input   C_req_full_n;
output   C_req_write;
input   C_rsp_empty_n;
output   C_rsp_read;
output  [31:0] C_address;
input  [31:0] C_datain;
output  [31:0] C_dataout;
output  [31:0] C_size;
output  [7:0] Csub_block_block0_address0;
output   Csub_block_block0_ce0;
input  [31:0] Csub_block_block0_q0;
input  [31:0] c_block0;
input  [31:0] wB;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_19;
wire    grp_matrixMul_matrixMul_TRN_10_fu_58_ap_start;
wire    grp_matrixMul_matrixMul_TRN_10_fu_58_ap_done;
wire    grp_matrixMul_matrixMul_TRN_10_fu_58_ap_idle;
wire    grp_matrixMul_matrixMul_TRN_10_fu_58_ap_ready;
wire    grp_matrixMul_matrixMul_TRN_10_fu_58_C_req_din;
wire    grp_matrixMul_matrixMul_TRN_10_fu_58_C_req_write;
wire    grp_matrixMul_matrixMul_TRN_10_fu_58_C_rsp_read;
wire   [31:0] grp_matrixMul_matrixMul_TRN_10_fu_58_C_address;
wire   [31:0] grp_matrixMul_matrixMul_TRN_10_fu_58_C_dataout;
wire   [31:0] grp_matrixMul_matrixMul_TRN_10_fu_58_C_size;
wire   [7:0] grp_matrixMul_matrixMul_TRN_10_fu_58_Csub_block_address0;
wire    grp_matrixMul_matrixMul_TRN_10_fu_58_Csub_block_ce0;
reg    ap_reg_grp_matrixMul_matrixMul_TRN_10_fu_58_ap_start;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_91;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'b1;
#0 ap_reg_grp_matrixMul_matrixMul_TRN_10_fu_58_ap_start = 1'b0;
end

matrixMul_matrixMul_TRN_10 grp_matrixMul_matrixMul_TRN_10_fu_58(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_matrixMul_matrixMul_TRN_10_fu_58_ap_start),
    .ap_done(grp_matrixMul_matrixMul_TRN_10_fu_58_ap_done),
    .ap_idle(grp_matrixMul_matrixMul_TRN_10_fu_58_ap_idle),
    .ap_ready(grp_matrixMul_matrixMul_TRN_10_fu_58_ap_ready),
    .blockDim_x(blockDim_x),
    .blockDim_y(blockDim_y),
    .blockDim_z(blockDim_z),
    .C_req_din(grp_matrixMul_matrixMul_TRN_10_fu_58_C_req_din),
    .C_req_full_n(C_req_full_n),
    .C_req_write(grp_matrixMul_matrixMul_TRN_10_fu_58_C_req_write),
    .C_rsp_empty_n(C_rsp_empty_n),
    .C_rsp_read(grp_matrixMul_matrixMul_TRN_10_fu_58_C_rsp_read),
    .C_address(grp_matrixMul_matrixMul_TRN_10_fu_58_C_address),
    .C_datain(C_datain),
    .C_dataout(grp_matrixMul_matrixMul_TRN_10_fu_58_C_dataout),
    .C_size(grp_matrixMul_matrixMul_TRN_10_fu_58_C_size),
    .Csub_block_address0(grp_matrixMul_matrixMul_TRN_10_fu_58_Csub_block_address0),
    .Csub_block_ce0(grp_matrixMul_matrixMul_TRN_10_fu_58_Csub_block_ce0),
    .Csub_block_q0(Csub_block_block0_q0),
    .c_r(c_block0),
    .wB(wB)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_matrixMul_matrixMul_TRN_10_fu_58_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
            ap_reg_grp_matrixMul_matrixMul_TRN_10_fu_58_ap_start <= 1'b1;
        end else if ((1'b1 == grp_matrixMul_matrixMul_TRN_10_fu_58_ap_ready)) begin
            ap_reg_grp_matrixMul_matrixMul_TRN_10_fu_58_ap_start <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)) | ((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == grp_matrixMul_matrixMul_TRN_10_fu_58_ap_done)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == grp_matrixMul_matrixMul_TRN_10_fu_58_ap_done))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_19) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_91) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if (~(1'b0 == grp_matrixMul_matrixMul_TRN_10_fu_58_ap_done)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C_address = grp_matrixMul_matrixMul_TRN_10_fu_58_C_address;

assign C_dataout = grp_matrixMul_matrixMul_TRN_10_fu_58_C_dataout;

assign C_req_din = grp_matrixMul_matrixMul_TRN_10_fu_58_C_req_din;

assign C_req_write = grp_matrixMul_matrixMul_TRN_10_fu_58_C_req_write;

assign C_rsp_read = grp_matrixMul_matrixMul_TRN_10_fu_58_C_rsp_read;

assign C_size = grp_matrixMul_matrixMul_TRN_10_fu_58_C_size;

assign Csub_block_block0_address0 = grp_matrixMul_matrixMul_TRN_10_fu_58_Csub_block_address0;

assign Csub_block_block0_ce0 = grp_matrixMul_matrixMul_TRN_10_fu_58_Csub_block_ce0;

always @ (*) begin
    ap_sig_19 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_91 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

assign grp_matrixMul_matrixMul_TRN_10_fu_58_ap_start = ap_reg_grp_matrixMul_matrixMul_TRN_10_fu_58_ap_start;

endmodule //matrixMul_matrixMul_TRN_10_wrapper
