// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// ==============================================================

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"
#include "hls_signal_handler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->
    typedef struct dim3 {
        unsigned int x;
        unsigned int y;
        unsigned int z;
       } dim3;



// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "C"
#define AUTOTB_TVOUT_C  "../tv/cdatafile/c.matrixMul.autotvout_C.dat"
#define AUTOTB_TVIN_C  "../tv/cdatafile/c.matrixMul.autotvin_C.dat"
// wrapc file define: "A"
#define AUTOTB_TVIN_A  "../tv/cdatafile/c.matrixMul.autotvin_A.dat"
// wrapc file define: "B"
#define AUTOTB_TVIN_B  "../tv/cdatafile/c.matrixMul.autotvin_B.dat"
// wrapc file define: "wA"
#define AUTOTB_TVIN_wA  "../tv/cdatafile/c.matrixMul.autotvin_wA.dat"
// wrapc file define: "wB"
#define AUTOTB_TVIN_wB  "../tv/cdatafile/c.matrixMul.autotvin_wB.dat"
// wrapc file define: "gridDim_x"
#define AUTOTB_TVIN_gridDim_x  "../tv/cdatafile/c.matrixMul.autotvin_gridDim_x.dat"
// wrapc file define: "gridDim_y"
#define AUTOTB_TVIN_gridDim_y  "../tv/cdatafile/c.matrixMul.autotvin_gridDim_y.dat"
// wrapc file define: "blockDim_x"
#define AUTOTB_TVIN_blockDim_x  "../tv/cdatafile/c.matrixMul.autotvin_blockDim_x.dat"
// wrapc file define: "blockDim_y"
#define AUTOTB_TVIN_blockDim_y  "../tv/cdatafile/c.matrixMul.autotvin_blockDim_y.dat"
// wrapc file define: "blockDim_z"
#define AUTOTB_TVIN_blockDim_z  "../tv/cdatafile/c.matrixMul.autotvin_blockDim_z.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "C"
#define AUTOTB_TVOUT_PC_C  "../tv/rtldatafile/rtl.matrixMul.autotvout_C.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			C_depth = 0;
			A_depth = 0;
			B_depth = 0;
			wA_depth = 0;
			wB_depth = 0;
			gridDim_x_depth = 0;
			gridDim_y_depth = 0;
			blockDim_x_depth = 0;
			blockDim_y_depth = 0;
			blockDim_z_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{C " << C_depth << "}\n";
			total_list << "{A " << A_depth << "}\n";
			total_list << "{B " << B_depth << "}\n";
			total_list << "{wA " << wA_depth << "}\n";
			total_list << "{wB " << wB_depth << "}\n";
			total_list << "{gridDim_x " << gridDim_x_depth << "}\n";
			total_list << "{gridDim_y " << gridDim_y_depth << "}\n";
			total_list << "{blockDim_x " << blockDim_x_depth << "}\n";
			total_list << "{blockDim_y " << blockDim_y_depth << "}\n";
			total_list << "{blockDim_z " << blockDim_z_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int C_depth;
		int A_depth;
		int B_depth;
		int wA_depth;
		int wB_depth;
		int gridDim_x_depth;
		int gridDim_y_depth;
		int blockDim_x_depth;
		int blockDim_y_depth;
		int blockDim_z_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};


#define matrixMul AESL_ORIG_DUT_matrixMul
extern void matrixMul (
float* C,
float* A,
float* B,
int wA,
int wB,
dim3 gridDim,
dim3 blockDim);
#undef matrixMul

void matrixMul (
float* C,
float* A,
float* B,
int wA,
int wB,
dim3 gridDim,
dim3 blockDim)
{
	refine_signal_handler();
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		CodeState = ENTER_WRAPC_PC;
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;


		// output port post check: "C"
		aesl_fh.read(AUTOTB_TVOUT_PC_C, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_C, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_C, AESL_token); // data

			sc_bv<32> *C_pc_buffer = new sc_bv<32>[10240];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'C', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'C', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					C_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_C, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_C))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: C
				{
					// bitslice(31, 0)
					// {
						// celement: C(31, 0)
						// {
							sc_lv<32>* C_lv0_0_10239_1 = new sc_lv<32>[10240];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: C(31, 0)
						{
							// carray: (0) => (10239) @ (1)
							for (int i_0 = 0; i_0 <= 10239; i_0 += 1)
							{
								if (&(C[0]) != NULL) // check the null address if the c port is array or others
								{
									C_lv0_0_10239_1[hls_map_index++].range(31, 0) = sc_bv<32>(C_pc_buffer[hls_map_index].range(31, 0));
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: C(31, 0)
						{
							// carray: (0) => (10239) @ (1)
							for (int i_0 = 0; i_0 <= 10239; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : C[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : C[0]
								// output_left_conversion : *(int*)&C[i_0]
								// output_type_conversion : (C_lv0_0_10239_1[hls_map_index++]).to_uint64()
								if (&(C[0]) != NULL) // check the null address if the c port is array or others
								{
									*(int*)&C[i_0] = (C_lv0_0_10239_1[hls_map_index++]).to_uint64();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] C_pc_buffer;
		}

		AESL_transaction_pc++;
	}
	else
	{
		CodeState = ENTER_WRAPC;
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "C"
		char* tvin_C = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_C);
		char* tvout_C = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_C);

		// "A"
		char* tvin_A = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_A);

		// "B"
		char* tvin_B = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_B);

		// "wA"
		char* tvin_wA = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_wA);

		// "wB"
		char* tvin_wB = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_wB);

		// "gridDim_x"
		char* tvin_gridDim_x = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_gridDim_x);

		// "gridDim_y"
		char* tvin_gridDim_y = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_gridDim_y);

		// "blockDim_x"
		char* tvin_blockDim_x = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_blockDim_x);

		// "blockDim_y"
		char* tvin_blockDim_y = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_blockDim_y);

		// "blockDim_z"
		char* tvin_blockDim_z = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_blockDim_z);

		CodeState = DUMP_INPUTS;
		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_C, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_C, tvin_C);

		sc_bv<32>* C_tvin_wrapc_buffer = new sc_bv<32>[10240];

		// RTL Name: C
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: C(31, 0)
				{
					// carray: (0) => (10239) @ (1)
					for (int i_0 = 0; i_0 <= 10239; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : C[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : C[0]
						// regulate_c_name       : C
						// input_type_conversion : *(int*)&C[i_0]
						if (&(C[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> C_tmp_mem;
							C_tmp_mem = *(int*)&C[i_0];
							C_tvin_wrapc_buffer[hls_map_index++].range(31, 0) = C_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 10240; i++)
		{
			sprintf(tvin_C, "%s\n", (C_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_C, tvin_C);
		}

		tcl_file.set_num(10240, &tcl_file.C_depth);
		sprintf(tvin_C, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_C, tvin_C);

		// release memory allocation
		delete [] C_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_A, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_A, tvin_A);

		sc_bv<32>* A_tvin_wrapc_buffer = new sc_bv<32>[3840];

		// RTL Name: A
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: A(31, 0)
				{
					// carray: (0) => (3839) @ (1)
					for (int i_0 = 0; i_0 <= 3839; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : A[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : A[0]
						// regulate_c_name       : A
						// input_type_conversion : *(int*)&A[i_0]
						if (&(A[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> A_tmp_mem;
							A_tmp_mem = *(int*)&A[i_0];
							A_tvin_wrapc_buffer[hls_map_index++].range(31, 0) = A_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 3840; i++)
		{
			sprintf(tvin_A, "%s\n", (A_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_A, tvin_A);
		}

		tcl_file.set_num(3840, &tcl_file.A_depth);
		sprintf(tvin_A, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_A, tvin_A);

		// release memory allocation
		delete [] A_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_B, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_B, tvin_B);

		sc_bv<32>* B_tvin_wrapc_buffer = new sc_bv<32>[6144];

		// RTL Name: B
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: B(31, 0)
				{
					// carray: (0) => (6143) @ (1)
					for (int i_0 = 0; i_0 <= 6143; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : B[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : B[0]
						// regulate_c_name       : B
						// input_type_conversion : *(int*)&B[i_0]
						if (&(B[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> B_tmp_mem;
							B_tmp_mem = *(int*)&B[i_0];
							B_tvin_wrapc_buffer[hls_map_index++].range(31, 0) = B_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 6144; i++)
		{
			sprintf(tvin_B, "%s\n", (B_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_B, tvin_B);
		}

		tcl_file.set_num(6144, &tcl_file.B_depth);
		sprintf(tvin_B, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_B, tvin_B);

		// release memory allocation
		delete [] B_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_wA, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_wA, tvin_wA);

		sc_bv<32> wA_tvin_wrapc_buffer;

		// RTL Name: wA
		{
			// bitslice(31, 0)
			{
				// celement: wA(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : wA
						// sub_1st_elem          : 
						// ori_name_1st_elem     : wA
						// regulate_c_name       : wA
						// input_type_conversion : wA
						if (&(wA) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> wA_tmp_mem;
							wA_tmp_mem = wA;
							wA_tvin_wrapc_buffer.range(31, 0) = wA_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_wA, "%s\n", (wA_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_wA, tvin_wA);
		}

		tcl_file.set_num(1, &tcl_file.wA_depth);
		sprintf(tvin_wA, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_wA, tvin_wA);

		// [[transaction]]
		sprintf(tvin_wB, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_wB, tvin_wB);

		sc_bv<32> wB_tvin_wrapc_buffer;

		// RTL Name: wB
		{
			// bitslice(31, 0)
			{
				// celement: wB(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : wB
						// sub_1st_elem          : 
						// ori_name_1st_elem     : wB
						// regulate_c_name       : wB
						// input_type_conversion : wB
						if (&(wB) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> wB_tmp_mem;
							wB_tmp_mem = wB;
							wB_tvin_wrapc_buffer.range(31, 0) = wB_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_wB, "%s\n", (wB_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_wB, tvin_wB);
		}

		tcl_file.set_num(1, &tcl_file.wB_depth);
		sprintf(tvin_wB, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_wB, tvin_wB);

		// [[transaction]]
		sprintf(tvin_gridDim_x, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_gridDim_x, tvin_gridDim_x);

		sc_bv<32> gridDim_x_tvin_wrapc_buffer;

		// RTL Name: gridDim_x
		{
			// bitslice(31, 0)
			{
				// celement: gridDim.x(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : gridDim.x
						// sub_1st_elem          : 
						// ori_name_1st_elem     : gridDim.x
						// regulate_c_name       : gridDim_x
						// input_type_conversion : gridDim.x
						if (&(gridDim.x) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> gridDim_x_tmp_mem;
							gridDim_x_tmp_mem = gridDim.x;
							gridDim_x_tvin_wrapc_buffer.range(31, 0) = gridDim_x_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_gridDim_x, "%s\n", (gridDim_x_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_gridDim_x, tvin_gridDim_x);
		}

		tcl_file.set_num(1, &tcl_file.gridDim_x_depth);
		sprintf(tvin_gridDim_x, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_gridDim_x, tvin_gridDim_x);

		// [[transaction]]
		sprintf(tvin_gridDim_y, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_gridDim_y, tvin_gridDim_y);

		sc_bv<32> gridDim_y_tvin_wrapc_buffer;

		// RTL Name: gridDim_y
		{
			// bitslice(31, 0)
			{
				// celement: gridDim.y(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : gridDim.y
						// sub_1st_elem          : 
						// ori_name_1st_elem     : gridDim.y
						// regulate_c_name       : gridDim_y
						// input_type_conversion : gridDim.y
						if (&(gridDim.y) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> gridDim_y_tmp_mem;
							gridDim_y_tmp_mem = gridDim.y;
							gridDim_y_tvin_wrapc_buffer.range(31, 0) = gridDim_y_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_gridDim_y, "%s\n", (gridDim_y_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_gridDim_y, tvin_gridDim_y);
		}

		tcl_file.set_num(1, &tcl_file.gridDim_y_depth);
		sprintf(tvin_gridDim_y, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_gridDim_y, tvin_gridDim_y);

		// [[transaction]]
		sprintf(tvin_blockDim_x, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_blockDim_x, tvin_blockDim_x);

		sc_bv<32> blockDim_x_tvin_wrapc_buffer;

		// RTL Name: blockDim_x
		{
			// bitslice(31, 0)
			{
				// celement: blockDim.x(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : blockDim.x
						// sub_1st_elem          : 
						// ori_name_1st_elem     : blockDim.x
						// regulate_c_name       : blockDim_x
						// input_type_conversion : blockDim.x
						if (&(blockDim.x) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> blockDim_x_tmp_mem;
							blockDim_x_tmp_mem = blockDim.x;
							blockDim_x_tvin_wrapc_buffer.range(31, 0) = blockDim_x_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_blockDim_x, "%s\n", (blockDim_x_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_blockDim_x, tvin_blockDim_x);
		}

		tcl_file.set_num(1, &tcl_file.blockDim_x_depth);
		sprintf(tvin_blockDim_x, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_blockDim_x, tvin_blockDim_x);

		// [[transaction]]
		sprintf(tvin_blockDim_y, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_blockDim_y, tvin_blockDim_y);

		sc_bv<32> blockDim_y_tvin_wrapc_buffer;

		// RTL Name: blockDim_y
		{
			// bitslice(31, 0)
			{
				// celement: blockDim.y(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : blockDim.y
						// sub_1st_elem          : 
						// ori_name_1st_elem     : blockDim.y
						// regulate_c_name       : blockDim_y
						// input_type_conversion : blockDim.y
						if (&(blockDim.y) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> blockDim_y_tmp_mem;
							blockDim_y_tmp_mem = blockDim.y;
							blockDim_y_tvin_wrapc_buffer.range(31, 0) = blockDim_y_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_blockDim_y, "%s\n", (blockDim_y_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_blockDim_y, tvin_blockDim_y);
		}

		tcl_file.set_num(1, &tcl_file.blockDim_y_depth);
		sprintf(tvin_blockDim_y, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_blockDim_y, tvin_blockDim_y);

		// [[transaction]]
		sprintf(tvin_blockDim_z, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_blockDim_z, tvin_blockDim_z);

		sc_bv<32> blockDim_z_tvin_wrapc_buffer;

		// RTL Name: blockDim_z
		{
			// bitslice(31, 0)
			{
				// celement: blockDim.z(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : blockDim.z
						// sub_1st_elem          : 
						// ori_name_1st_elem     : blockDim.z
						// regulate_c_name       : blockDim_z
						// input_type_conversion : blockDim.z
						if (&(blockDim.z) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> blockDim_z_tmp_mem;
							blockDim_z_tmp_mem = blockDim.z;
							blockDim_z_tvin_wrapc_buffer.range(31, 0) = blockDim_z_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_blockDim_z, "%s\n", (blockDim_z_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_blockDim_z, tvin_blockDim_z);
		}

		tcl_file.set_num(1, &tcl_file.blockDim_z_depth);
		sprintf(tvin_blockDim_z, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_blockDim_z, tvin_blockDim_z);

// [call_c_dut] ---------->

		CodeState = CALL_C_DUT;
		AESL_ORIG_DUT_matrixMul(C, A, B, wA, wB, gridDim, blockDim);

		CodeState = DUMP_OUTPUTS;

		// [[transaction]]
		sprintf(tvout_C, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_C, tvout_C);

		sc_bv<32>* C_tvout_wrapc_buffer = new sc_bv<32>[10240];

		// RTL Name: C
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: C(31, 0)
				{
					// carray: (0) => (10239) @ (1)
					for (int i_0 = 0; i_0 <= 10239; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : C[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : C[0]
						// regulate_c_name       : C
						// input_type_conversion : *(int*)&C[i_0]
						if (&(C[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> C_tmp_mem;
							C_tmp_mem = *(int*)&C[i_0];
							C_tvout_wrapc_buffer[hls_map_index++].range(31, 0) = C_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 10240; i++)
		{
			sprintf(tvout_C, "%s\n", (C_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_C, tvout_C);
		}

		tcl_file.set_num(10240, &tcl_file.C_depth);
		sprintf(tvout_C, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_C, tvout_C);

		// release memory allocation
		delete [] C_tvout_wrapc_buffer;

		CodeState = DELETE_CHAR_BUFFERS;
		// release memory allocation: "C"
		delete [] tvout_C;
		delete [] tvin_C;
		// release memory allocation: "A"
		delete [] tvin_A;
		// release memory allocation: "B"
		delete [] tvin_B;
		// release memory allocation: "wA"
		delete [] tvin_wA;
		// release memory allocation: "wB"
		delete [] tvin_wB;
		// release memory allocation: "gridDim_x"
		delete [] tvin_gridDim_x;
		// release memory allocation: "gridDim_y"
		delete [] tvin_gridDim_y;
		// release memory allocation: "blockDim_x"
		delete [] tvin_blockDim_x;
		// release memory allocation: "blockDim_y"
		delete [] tvin_blockDim_y;
		// release memory allocation: "blockDim_z"
		delete [] tvin_blockDim_z;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}

