// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

 `timescale 1ns/1ps


`define AUTOTB_DUT      matrixMul
`define AUTOTB_DUT_INST AESL_inst_matrixMul
`define AUTOTB_TOP      apatb_matrixMul_top
`define AUTOTB_LAT_RESULT_FILE "matrixMul.result.lat.rb"
`define AUTOTB_PER_RESULT_TRANS_FILE "matrixMul.performance.result.transaction.xml"
`define AUTOTB_TOP_INST AESL_inst_apatb_matrixMul_top
`define AUTOTB_MAX_ALLOW_LATENCY  15000000
`define AUTOTB_CLOCK_PERIOD_DIV2 5.00

`define AESL_BUS_C AESL_autobus_C
`define AESL_BUS_INST_C bus_inst_C
`define AESL_BUS_A AESL_autobus_A
`define AESL_BUS_INST_A bus_inst_A
`define AESL_BUS_B AESL_autobus_B
`define AESL_BUS_INST_B bus_inst_B
`define AESL_DEPTH_wA 1
`define AESL_DEPTH_wB 1
`define AESL_DEPTH_gridDim_x 1
`define AESL_DEPTH_gridDim_y 1
`define AESL_DEPTH_gridDim_z 1
`define AESL_DEPTH_blockDim_x 1
`define AESL_DEPTH_blockDim_y 1
`define AESL_DEPTH_blockDim_z 1
`define AUTOTB_TVIN_C  "./c.matrixMul.autotvin_C.dat"
`define AUTOTB_TVIN_A  "./c.matrixMul.autotvin_A.dat"
`define AUTOTB_TVIN_B  "./c.matrixMul.autotvin_B.dat"
`define AUTOTB_TVIN_wA  "./c.matrixMul.autotvin_wA.dat"
`define AUTOTB_TVIN_wB  "./c.matrixMul.autotvin_wB.dat"
`define AUTOTB_TVIN_gridDim_x  "./c.matrixMul.autotvin_gridDim_x.dat"
`define AUTOTB_TVIN_gridDim_y  "./c.matrixMul.autotvin_gridDim_y.dat"
`define AUTOTB_TVIN_blockDim_x  "./c.matrixMul.autotvin_blockDim_x.dat"
`define AUTOTB_TVIN_blockDim_y  "./c.matrixMul.autotvin_blockDim_y.dat"
`define AUTOTB_TVIN_blockDim_z  "./c.matrixMul.autotvin_blockDim_z.dat"
`define AUTOTB_TVIN_C_out_wrapc  "./rtl.matrixMul.autotvin_C.dat"
`define AUTOTB_TVIN_A_out_wrapc  "./rtl.matrixMul.autotvin_A.dat"
`define AUTOTB_TVIN_B_out_wrapc  "./rtl.matrixMul.autotvin_B.dat"
`define AUTOTB_TVIN_wA_out_wrapc  "./rtl.matrixMul.autotvin_wA.dat"
`define AUTOTB_TVIN_wB_out_wrapc  "./rtl.matrixMul.autotvin_wB.dat"
`define AUTOTB_TVIN_gridDim_x_out_wrapc  "./rtl.matrixMul.autotvin_gridDim_x.dat"
`define AUTOTB_TVIN_gridDim_y_out_wrapc  "./rtl.matrixMul.autotvin_gridDim_y.dat"
`define AUTOTB_TVIN_blockDim_x_out_wrapc  "./rtl.matrixMul.autotvin_blockDim_x.dat"
`define AUTOTB_TVIN_blockDim_y_out_wrapc  "./rtl.matrixMul.autotvin_blockDim_y.dat"
`define AUTOTB_TVIN_blockDim_z_out_wrapc  "./rtl.matrixMul.autotvin_blockDim_z.dat"
`define AUTOTB_TVOUT_C  "./c.matrixMul.autotvout_C.dat"
`define AUTOTB_TVOUT_C_out_wrapc  "./impl_rtl.matrixMul.autotvout_C.dat"
module `AUTOTB_TOP;

parameter AUTOTB_TRANSACTION_NUM = 1;
parameter PROGRESS_TIMEOUT = 10000000;
parameter LATENCY_ESTIMATION = -1;
parameter LENGTH_C = 10240;
parameter LENGTH_A = 3840;
parameter LENGTH_B = 6144;
parameter LENGTH_wA = 1;
parameter LENGTH_wB = 1;
parameter LENGTH_gridDim_x = 1;
parameter LENGTH_gridDim_y = 1;
parameter LENGTH_blockDim_x = 1;
parameter LENGTH_blockDim_y = 1;
parameter LENGTH_blockDim_z = 1;

task read_token;
    input integer fp;
    output reg [127 : 0] token;
    integer ret;
    begin
        token = "";
        ret = 0;
        ret = $fscanf(fp,"%s",token);
    end
endtask

task post_check;
    input integer fp1;
    input integer fp2;
    reg [127 : 0] token1;
    reg [127 : 0] token2;
    reg [127 : 0] golden;
    reg [127 : 0] result;
    integer ret;
    begin
        read_token(fp1, token1);
        read_token(fp2, token2);
        if (token1 != "[[[runtime]]]" || token2 != "[[[runtime]]]") begin
            $display("ERROR: Simulation using HLS TB failed.");
            $finish;
        end
        read_token(fp1, token1);
        read_token(fp2, token2);
        while (token1 != "[[[/runtime]]]" && token2 != "[[[/runtime]]]") begin
            if (token1 != "[[transaction]]" || token2 != "[[transaction]]") begin
                $display("ERROR: Simulation using HLS TB failed.");
                  $finish;
            end
            read_token(fp1, token1);  // skip transaction number
            read_token(fp2, token2);  // skip transaction number
              read_token(fp1, token1);
              read_token(fp2, token2);
            while(token1 != "[[/transaction]]" && token2 != "[[/transaction]]") begin
                ret = $sscanf(token1, "0x%x", golden);
                  if (ret != 1) begin
                      $display("Failed to parse token!");
                    $display("ERROR: Simulation using HLS TB failed.");
                      $finish;
                  end
                ret = $sscanf(token2, "0x%x", result);
                  if (ret != 1) begin
                      $display("Failed to parse token!");
                    $display("ERROR: Simulation using HLS TB failed.");
                      $finish;
                  end
                if(golden != result) begin
                      $display("%x (expected) vs. %x (actual) - mismatch", golden, result);
                    $display("ERROR: Simulation using HLS TB failed.");
                      $finish;
                end
                  read_token(fp1, token1);
                  read_token(fp2, token2);
            end
              read_token(fp1, token1);
              read_token(fp2, token2);
        end
    end
endtask

reg AESL_clock;
reg rst;
reg start;
reg ce;
reg continue;
wire AESL_start;
wire AESL_reset;
wire AESL_ce;
wire AESL_ready;
wire AESL_idle;
wire AESL_continue;
wire AESL_done;
reg AESL_done_delay = 0;
reg AESL_done_delay2 = 0;
reg AESL_ready_delay = 0;
wire ready;
wire ready_wire;
wire ap_start;
wire ap_done;
wire ap_idle;
wire ap_ready;
wire  C_req_din;
wire  C_req_full_n;
wire  C_req_write;
wire  C_rsp_empty_n;
wire  C_rsp_read;
wire [31 : 0] C_address;
wire [31 : 0] C_datain;
wire [31 : 0] C_dataout;
wire [31 : 0] C_size;
wire  A_req_din;
wire  A_req_full_n;
wire  A_req_write;
wire  A_rsp_empty_n;
wire  A_rsp_read;
wire [31 : 0] A_address;
wire [31 : 0] A_datain;
wire [31 : 0] A_dataout;
wire [31 : 0] A_size;
wire  B_req_din;
wire  B_req_full_n;
wire  B_req_write;
wire  B_rsp_empty_n;
wire  B_rsp_read;
wire [31 : 0] B_address;
wire [31 : 0] B_datain;
wire [31 : 0] B_dataout;
wire [31 : 0] B_size;
wire [31 : 0] wA;
wire [31 : 0] wB;
wire [31 : 0] gridDim_x;
wire [31 : 0] gridDim_y;
wire [31 : 0] gridDim_z;
wire [31 : 0] blockDim_x;
wire [31 : 0] blockDim_y;
wire [31 : 0] blockDim_z;
integer done_cnt = 0;
integer AESL_ready_cnt = 0;
integer ready_cnt = 0;
reg ready_initial;
reg ready_initial_n;
reg ready_last_n;
reg ready_delay_last_n;
reg done_delay_last_n;
reg interface_done = 0;

`AUTOTB_DUT `AUTOTB_DUT_INST(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_ready(ap_ready),
    .C_req_din(C_req_din),
    .C_req_full_n(C_req_full_n),
    .C_req_write(C_req_write),
    .C_rsp_empty_n(C_rsp_empty_n),
    .C_rsp_read(C_rsp_read),
    .C_address(C_address),
    .C_datain(C_datain),
    .C_dataout(C_dataout),
    .C_size(C_size),
    .A_req_din(A_req_din),
    .A_req_full_n(A_req_full_n),
    .A_req_write(A_req_write),
    .A_rsp_empty_n(A_rsp_empty_n),
    .A_rsp_read(A_rsp_read),
    .A_address(A_address),
    .A_datain(A_datain),
    .A_dataout(A_dataout),
    .A_size(A_size),
    .B_req_din(B_req_din),
    .B_req_full_n(B_req_full_n),
    .B_req_write(B_req_write),
    .B_rsp_empty_n(B_rsp_empty_n),
    .B_rsp_read(B_rsp_read),
    .B_address(B_address),
    .B_datain(B_datain),
    .B_dataout(B_dataout),
    .B_size(B_size),
    .wA(wA),
    .wB(wB),
    .gridDim_x(gridDim_x),
    .gridDim_y(gridDim_y),
    .gridDim_z(gridDim_z),
    .blockDim_x(blockDim_x),
    .blockDim_y(blockDim_y),
    .blockDim_z(blockDim_z));

// Assignment for control signal
assign ap_clk = AESL_clock;
assign ap_rst = AESL_reset;
assign ap_rst_n = ~AESL_reset;
assign AESL_reset = rst;
assign ap_start = AESL_start;
assign AESL_start = start;
assign AESL_done = ap_done;
assign AESL_idle = ap_idle;
assign AESL_ready = ap_ready;
assign AESL_ce = ce;
assign AESL_continue = continue;
    always @(posedge AESL_clock) begin
        if (AESL_reset) begin
        end else begin
            if (AESL_done !== 1 && AESL_done !== 0) begin
                $display("ERROR: Control signal AESL_done is invalid!");
                $finish;
            end
        end
    end
    always @(posedge AESL_clock) begin
        if (AESL_reset) begin
        end else begin
            if (AESL_ready !== 1 && AESL_ready !== 0) begin
                $display("ERROR: Control signal AESL_ready is invalid!");
                $finish;
            end
        end
    end

// bus interface "C"
wire bus_C_req_RW;
wire bus_C_req_full_n;
wire bus_C_req_RW_en;
wire bus_C_rsp_empty_n;
wire bus_C_rsp_read;
wire [32 - 1:0] bus_C_address;
wire [32 - 1:0] bus_C_din;
wire [32 - 1:0] bus_C_dout;
wire [32 - 1:0] bus_C_size;
wire bus_C_ready;
wire bus_C_done;
wire bus_C_finish;

`AESL_BUS_C `AESL_BUS_INST_C (
    .clk(AESL_clock),
    .rst(AESL_reset),
    .bus_req_RW(bus_C_req_RW),
    .bus_req_full_n(bus_C_req_full_n),
    .bus_req_RW_en(bus_C_req_RW_en),
    .bus_rsp_empty_n(bus_C_rsp_empty_n),
    .bus_rsp_read(bus_C_rsp_read),
    .bus_address(bus_C_address),
    .bus_din(bus_C_din),
    .bus_dout(bus_C_dout),
    .bus_size(bus_C_size),
    .ready(bus_C_ready),
    .done(bus_C_done),
    .finish(bus_C_finish));

assign bus_C_req_RW    = C_req_din;
assign bus_C_req_RW_en = C_req_write & C_req_full_n;
assign bus_C_rsp_read  = C_rsp_read & C_rsp_empty_n;
assign bus_C_address   = C_address;
assign bus_C_din       = C_dataout;
assign bus_C_size      = C_size;
assign C_datain          = bus_C_dout;
assign bus_C_ready     = ready;
assign bus_C_done      = AESL_done;

reg reg_bus_C_req_full_n;

initial begin : gen_reg_bus_C_req_full_n_process
    integer rand;
    reg_bus_C_req_full_n = bus_C_req_full_n;
    while (1) begin
        @ (bus_C_req_full_n);
        reg_bus_C_req_full_n = bus_C_req_full_n;
    end
end


assign C_req_full_n = reg_bus_C_req_full_n;

reg reg_bus_C_rsp_empty_n;

initial begin : gen_reg_bus_C_rsp_empty_n_process
    integer rand;
    reg_bus_C_rsp_empty_n = bus_C_rsp_empty_n;
    while (1) begin
        @ (bus_C_rsp_empty_n);
        reg_bus_C_rsp_empty_n = bus_C_rsp_empty_n;
    end
end


assign C_rsp_empty_n = reg_bus_C_rsp_empty_n;



// bus interface "A"
wire bus_A_req_RW;
wire bus_A_req_full_n;
wire bus_A_req_RW_en;
wire bus_A_rsp_empty_n;
wire bus_A_rsp_read;
wire [32 - 1:0] bus_A_address;
wire [32 - 1:0] bus_A_din;
wire [32 - 1:0] bus_A_dout;
wire [32 - 1:0] bus_A_size;
wire bus_A_ready;
wire bus_A_done;
wire bus_A_finish;

`AESL_BUS_A `AESL_BUS_INST_A (
    .clk(AESL_clock),
    .rst(AESL_reset),
    .bus_req_RW(bus_A_req_RW),
    .bus_req_full_n(bus_A_req_full_n),
    .bus_req_RW_en(bus_A_req_RW_en),
    .bus_rsp_empty_n(bus_A_rsp_empty_n),
    .bus_rsp_read(bus_A_rsp_read),
    .bus_address(bus_A_address),
    .bus_din(bus_A_din),
    .bus_dout(bus_A_dout),
    .bus_size(bus_A_size),
    .ready(bus_A_ready),
    .done(bus_A_done),
    .finish(bus_A_finish));

assign bus_A_req_RW    = A_req_din;
assign bus_A_req_RW_en = A_req_write & A_req_full_n;
assign bus_A_rsp_read  = A_rsp_read & A_rsp_empty_n;
assign bus_A_address   = A_address;
assign bus_A_din       = A_dataout;
assign bus_A_size      = A_size;
assign A_datain          = bus_A_dout;
assign bus_A_ready     = ready;
assign bus_A_done      = AESL_done;

reg reg_bus_A_req_full_n;

initial begin : gen_reg_bus_A_req_full_n_process
    integer rand;
    reg_bus_A_req_full_n = bus_A_req_full_n;
    while (1) begin
        @ (bus_A_req_full_n);
        reg_bus_A_req_full_n = bus_A_req_full_n;
    end
end


assign A_req_full_n = reg_bus_A_req_full_n;

reg reg_bus_A_rsp_empty_n;

initial begin : gen_reg_bus_A_rsp_empty_n_process
    integer rand;
    reg_bus_A_rsp_empty_n = bus_A_rsp_empty_n;
    while (1) begin
        @ (bus_A_rsp_empty_n);
        reg_bus_A_rsp_empty_n = bus_A_rsp_empty_n;
    end
end


assign A_rsp_empty_n = reg_bus_A_rsp_empty_n;



// bus interface "B"
wire bus_B_req_RW;
wire bus_B_req_full_n;
wire bus_B_req_RW_en;
wire bus_B_rsp_empty_n;
wire bus_B_rsp_read;
wire [32 - 1:0] bus_B_address;
wire [32 - 1:0] bus_B_din;
wire [32 - 1:0] bus_B_dout;
wire [32 - 1:0] bus_B_size;
wire bus_B_ready;
wire bus_B_done;
wire bus_B_finish;

`AESL_BUS_B `AESL_BUS_INST_B (
    .clk(AESL_clock),
    .rst(AESL_reset),
    .bus_req_RW(bus_B_req_RW),
    .bus_req_full_n(bus_B_req_full_n),
    .bus_req_RW_en(bus_B_req_RW_en),
    .bus_rsp_empty_n(bus_B_rsp_empty_n),
    .bus_rsp_read(bus_B_rsp_read),
    .bus_address(bus_B_address),
    .bus_din(bus_B_din),
    .bus_dout(bus_B_dout),
    .bus_size(bus_B_size),
    .ready(bus_B_ready),
    .done(bus_B_done),
    .finish(bus_B_finish));

assign bus_B_req_RW    = B_req_din;
assign bus_B_req_RW_en = B_req_write & B_req_full_n;
assign bus_B_rsp_read  = B_rsp_read & B_rsp_empty_n;
assign bus_B_address   = B_address;
assign bus_B_din       = B_dataout;
assign bus_B_size      = B_size;
assign B_datain          = bus_B_dout;
assign bus_B_ready     = ready;
assign bus_B_done      = AESL_done;

reg reg_bus_B_req_full_n;

initial begin : gen_reg_bus_B_req_full_n_process
    integer rand;
    reg_bus_B_req_full_n = bus_B_req_full_n;
    while (1) begin
        @ (bus_B_req_full_n);
        reg_bus_B_req_full_n = bus_B_req_full_n;
    end
end


assign B_req_full_n = reg_bus_B_req_full_n;

reg reg_bus_B_rsp_empty_n;

initial begin : gen_reg_bus_B_rsp_empty_n_process
    integer rand;
    reg_bus_B_rsp_empty_n = bus_B_rsp_empty_n;
    while (1) begin
        @ (bus_B_rsp_empty_n);
        reg_bus_B_rsp_empty_n = bus_B_rsp_empty_n;
    end
end


assign B_rsp_empty_n = reg_bus_B_rsp_empty_n;


// The signal of port wA
reg [31: 0] AESL_REG_wA = 0;
assign wA = AESL_REG_wA;
initial begin : read_file_process_wA
    integer fp;
    integer err;
    integer ret;
    integer rand;
    reg [127  : 0] token;
    integer i;
    reg transaction_finish;
    integer transaction_idx;
    transaction_idx = 0;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVIN_wA,"r");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVIN_wA);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    if (token != "[[[runtime]]]") begin
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    while (token != "[[[/runtime]]]") begin
        if (token != "[[transaction]]") begin
            $display("ERROR: Simulation using HLS TB failed.");
              $finish;
        end
        read_token(fp, token);  // skip transaction number
          read_token(fp, token);
            # 0.2;
            while(ready_wire !== 1) begin
                @(posedge AESL_clock);
                # 0.2;
            end
        if(token != "[[/transaction]]") begin
            ret = $sscanf(token, "0x%x", AESL_REG_wA);
              if (ret != 1) begin
                  $display("Failed to parse token!");
                $display("ERROR: Simulation using HLS TB failed.");
                  $finish;
              end
            @(posedge AESL_clock);
              read_token(fp, token);
        end
          read_token(fp, token);
    end
    $fclose(fp);
end


// The signal of port wB
reg [31: 0] AESL_REG_wB = 0;
assign wB = AESL_REG_wB;
initial begin : read_file_process_wB
    integer fp;
    integer err;
    integer ret;
    integer rand;
    reg [127  : 0] token;
    integer i;
    reg transaction_finish;
    integer transaction_idx;
    transaction_idx = 0;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVIN_wB,"r");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVIN_wB);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    if (token != "[[[runtime]]]") begin
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    while (token != "[[[/runtime]]]") begin
        if (token != "[[transaction]]") begin
            $display("ERROR: Simulation using HLS TB failed.");
              $finish;
        end
        read_token(fp, token);  // skip transaction number
          read_token(fp, token);
            # 0.2;
            while(ready_wire !== 1) begin
                @(posedge AESL_clock);
                # 0.2;
            end
        if(token != "[[/transaction]]") begin
            ret = $sscanf(token, "0x%x", AESL_REG_wB);
              if (ret != 1) begin
                  $display("Failed to parse token!");
                $display("ERROR: Simulation using HLS TB failed.");
                  $finish;
              end
            @(posedge AESL_clock);
              read_token(fp, token);
        end
          read_token(fp, token);
    end
    $fclose(fp);
end


// The signal of port gridDim_x
reg [31: 0] AESL_REG_gridDim_x = 0;
assign gridDim_x = AESL_REG_gridDim_x;
initial begin : read_file_process_gridDim_x
    integer fp;
    integer err;
    integer ret;
    integer rand;
    reg [127  : 0] token;
    integer i;
    reg transaction_finish;
    integer transaction_idx;
    transaction_idx = 0;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVIN_gridDim_x,"r");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVIN_gridDim_x);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    if (token != "[[[runtime]]]") begin
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    while (token != "[[[/runtime]]]") begin
        if (token != "[[transaction]]") begin
            $display("ERROR: Simulation using HLS TB failed.");
              $finish;
        end
        read_token(fp, token);  // skip transaction number
          read_token(fp, token);
            # 0.2;
            while(ready_wire !== 1) begin
                @(posedge AESL_clock);
                # 0.2;
            end
        if(token != "[[/transaction]]") begin
            ret = $sscanf(token, "0x%x", AESL_REG_gridDim_x);
              if (ret != 1) begin
                  $display("Failed to parse token!");
                $display("ERROR: Simulation using HLS TB failed.");
                  $finish;
              end
            @(posedge AESL_clock);
              read_token(fp, token);
        end
          read_token(fp, token);
    end
    $fclose(fp);
end


// The signal of port gridDim_y
reg [31: 0] AESL_REG_gridDim_y = 0;
assign gridDim_y = AESL_REG_gridDim_y;
initial begin : read_file_process_gridDim_y
    integer fp;
    integer err;
    integer ret;
    integer rand;
    reg [127  : 0] token;
    integer i;
    reg transaction_finish;
    integer transaction_idx;
    transaction_idx = 0;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVIN_gridDim_y,"r");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVIN_gridDim_y);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    if (token != "[[[runtime]]]") begin
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    while (token != "[[[/runtime]]]") begin
        if (token != "[[transaction]]") begin
            $display("ERROR: Simulation using HLS TB failed.");
              $finish;
        end
        read_token(fp, token);  // skip transaction number
          read_token(fp, token);
            # 0.2;
            while(ready_wire !== 1) begin
                @(posedge AESL_clock);
                # 0.2;
            end
        if(token != "[[/transaction]]") begin
            ret = $sscanf(token, "0x%x", AESL_REG_gridDim_y);
              if (ret != 1) begin
                  $display("Failed to parse token!");
                $display("ERROR: Simulation using HLS TB failed.");
                  $finish;
              end
            @(posedge AESL_clock);
              read_token(fp, token);
        end
          read_token(fp, token);
    end
    $fclose(fp);
end


// The signal of port gridDim_z
reg [31: 0] AESL_REG_gridDim_z = 0;
assign gridDim_z = AESL_REG_gridDim_z;

// The signal of port blockDim_x
reg [31: 0] AESL_REG_blockDim_x = 0;
assign blockDim_x = AESL_REG_blockDim_x;
initial begin : read_file_process_blockDim_x
    integer fp;
    integer err;
    integer ret;
    integer rand;
    reg [127  : 0] token;
    integer i;
    reg transaction_finish;
    integer transaction_idx;
    transaction_idx = 0;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVIN_blockDim_x,"r");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVIN_blockDim_x);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    if (token != "[[[runtime]]]") begin
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    while (token != "[[[/runtime]]]") begin
        if (token != "[[transaction]]") begin
            $display("ERROR: Simulation using HLS TB failed.");
              $finish;
        end
        read_token(fp, token);  // skip transaction number
          read_token(fp, token);
            # 0.2;
            while(ready_wire !== 1) begin
                @(posedge AESL_clock);
                # 0.2;
            end
        if(token != "[[/transaction]]") begin
            ret = $sscanf(token, "0x%x", AESL_REG_blockDim_x);
              if (ret != 1) begin
                  $display("Failed to parse token!");
                $display("ERROR: Simulation using HLS TB failed.");
                  $finish;
              end
            @(posedge AESL_clock);
              read_token(fp, token);
        end
          read_token(fp, token);
    end
    $fclose(fp);
end


// The signal of port blockDim_y
reg [31: 0] AESL_REG_blockDim_y = 0;
assign blockDim_y = AESL_REG_blockDim_y;
initial begin : read_file_process_blockDim_y
    integer fp;
    integer err;
    integer ret;
    integer rand;
    reg [127  : 0] token;
    integer i;
    reg transaction_finish;
    integer transaction_idx;
    transaction_idx = 0;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVIN_blockDim_y,"r");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVIN_blockDim_y);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    if (token != "[[[runtime]]]") begin
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    while (token != "[[[/runtime]]]") begin
        if (token != "[[transaction]]") begin
            $display("ERROR: Simulation using HLS TB failed.");
              $finish;
        end
        read_token(fp, token);  // skip transaction number
          read_token(fp, token);
            # 0.2;
            while(ready_wire !== 1) begin
                @(posedge AESL_clock);
                # 0.2;
            end
        if(token != "[[/transaction]]") begin
            ret = $sscanf(token, "0x%x", AESL_REG_blockDim_y);
              if (ret != 1) begin
                  $display("Failed to parse token!");
                $display("ERROR: Simulation using HLS TB failed.");
                  $finish;
              end
            @(posedge AESL_clock);
              read_token(fp, token);
        end
          read_token(fp, token);
    end
    $fclose(fp);
end


// The signal of port blockDim_z
reg [31: 0] AESL_REG_blockDim_z = 0;
assign blockDim_z = AESL_REG_blockDim_z;
initial begin : read_file_process_blockDim_z
    integer fp;
    integer err;
    integer ret;
    integer rand;
    reg [127  : 0] token;
    integer i;
    reg transaction_finish;
    integer transaction_idx;
    transaction_idx = 0;
    wait(AESL_reset === 0);
    fp = $fopen(`AUTOTB_TVIN_blockDim_z,"r");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVIN_blockDim_z);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    if (token != "[[[runtime]]]") begin
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    read_token(fp, token);
    while (token != "[[[/runtime]]]") begin
        if (token != "[[transaction]]") begin
            $display("ERROR: Simulation using HLS TB failed.");
              $finish;
        end
        read_token(fp, token);  // skip transaction number
          read_token(fp, token);
            # 0.2;
            while(ready_wire !== 1) begin
                @(posedge AESL_clock);
                # 0.2;
            end
        if(token != "[[/transaction]]") begin
            ret = $sscanf(token, "0x%x", AESL_REG_blockDim_z);
              if (ret != 1) begin
                  $display("Failed to parse token!");
                $display("ERROR: Simulation using HLS TB failed.");
                  $finish;
              end
            @(posedge AESL_clock);
              read_token(fp, token);
        end
          read_token(fp, token);
    end
    $fclose(fp);
end


initial begin : generate_AESL_ready_cnt_proc
    AESL_ready_cnt = 0;
    wait(AESL_reset === 0);
    while(AESL_ready_cnt != AUTOTB_TRANSACTION_NUM) begin
        while(AESL_ready !== 1) begin
            @(posedge AESL_clock);
            # 0.4;
        end
        @(negedge AESL_clock);
        AESL_ready_cnt = AESL_ready_cnt + 1;
        @(posedge AESL_clock);
        # 0.4;
    end
end

    event next_trigger_ready_cnt;
    
    initial begin : gen_ready_cnt
        ready_cnt = 0;
        wait (AESL_reset === 0);
        forever begin
            @ (posedge AESL_clock);
            if (ready == 1) begin
                if (ready_cnt < AUTOTB_TRANSACTION_NUM) begin
                    ready_cnt = ready_cnt + 1;
                end
            end
            -> next_trigger_ready_cnt;
        end
    end
    
    wire all_finish = (done_cnt == AUTOTB_TRANSACTION_NUM);
    
    // done_cnt
    always @ (posedge AESL_clock) begin
        if (AESL_reset) begin
            done_cnt <= 0;
        end else begin
            if (AESL_done == 1) begin
                if (done_cnt < AUTOTB_TRANSACTION_NUM) begin
                    done_cnt <= done_cnt + 1;
                end
            end
        end
    end
    
    initial begin : finish_simulation
        integer fp1;
        integer fp2;
        wait (all_finish == 1);
        // last transaction is saved at negedge right after last done
        @ (posedge AESL_clock);
        @ (posedge AESL_clock);
        @ (posedge AESL_clock);
        @ (posedge AESL_clock);
    fp1 = $fopen("./rtl.matrixMul.autotvout_C.dat", "r");
    fp2 = $fopen("./impl_rtl.matrixMul.autotvout_C.dat", "r");
    if(fp1 == 0)        // Failed to open file
        $display("Failed to open file \"./rtl.matrixMul.autotvout_C.dat\"!");
    else if(fp2 == 0)
        $display("Failed to open file \"./impl_rtl.matrixMul.autotvout_C.dat\"!");
    else begin
        $display("Comparing rtl.matrixMul.autotvout_C.dat with impl_rtl.matrixMul.autotvout_C.dat");
        post_check(fp1, fp2);
    end
    $fclose(fp1);
    $fclose(fp2);
        $display("Simulation Passed.");
        $finish;
    end
    
initial begin
    AESL_clock = 0;
    forever #`AUTOTB_CLOCK_PERIOD_DIV2 AESL_clock = ~AESL_clock;
end


reg end_C;
reg [31:0] size_C;
reg [31:0] size_C_backup;
reg end_A;
reg [31:0] size_A;
reg [31:0] size_A_backup;
reg end_B;
reg [31:0] size_B;
reg [31:0] size_B_backup;
reg end_wA;
reg [31:0] size_wA;
reg [31:0] size_wA_backup;
reg end_wB;
reg [31:0] size_wB;
reg [31:0] size_wB_backup;
reg end_gridDim_x;
reg [31:0] size_gridDim_x;
reg [31:0] size_gridDim_x_backup;
reg end_gridDim_y;
reg [31:0] size_gridDim_y;
reg [31:0] size_gridDim_y_backup;
reg end_blockDim_x;
reg [31:0] size_blockDim_x;
reg [31:0] size_blockDim_x_backup;
reg end_blockDim_y;
reg [31:0] size_blockDim_y;
reg [31:0] size_blockDim_y_backup;
reg end_blockDim_z;
reg [31:0] size_blockDim_z;
reg [31:0] size_blockDim_z_backup;

initial begin : initial_process
    integer rand;
    rst = 1;
    # 100;
    repeat(3) @ (posedge AESL_clock);
    rst = 0;
end
initial begin : start_process
    integer rand;
    reg [31:0] start_cnt;
    ce = 1;
    start = 0;
    start_cnt = 0;
    wait (AESL_reset === 0);
    @ (posedge AESL_clock);
    #0 start = 1;
    start_cnt = start_cnt + 1;
    forever begin
        @ (posedge AESL_clock);
        if (start_cnt >= AUTOTB_TRANSACTION_NUM) begin
            // keep pushing garbage in
            #0 start = 1;
        end
        if (AESL_ready) begin
            start_cnt = start_cnt + 1;
        end
    end
end

always @(AESL_done)
begin
    continue = AESL_done;
end

initial begin : ready_initial_process
    ready_initial = 0;
    wait (AESL_start === 1);
    ready_initial = 1;
    @(posedge AESL_clock);
    ready_initial = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset)
      AESL_ready_delay = 0;
  else
      AESL_ready_delay = AESL_ready;
end
initial begin : ready_last_n_process
  ready_last_n = 1;
  wait(ready_cnt == AUTOTB_TRANSACTION_NUM)
  @(posedge AESL_clock);
  ready_last_n <= 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset)
      ready_delay_last_n = 0;
  else
      ready_delay_last_n <= ready_last_n;
end
assign ready = (ready_initial | AESL_ready_delay);
assign ready_wire = ready_initial | AESL_ready_delay;
initial begin : done_delay_last_n_process
  done_delay_last_n = 1;
  while(done_cnt < AUTOTB_TRANSACTION_NUM)
      @(posedge AESL_clock);
  # 0.1;
  done_delay_last_n = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset)
  begin
      AESL_done_delay <= 0;
      AESL_done_delay2 <= 0;
  end
  else begin
      AESL_done_delay <= AESL_done & done_delay_last_n;
      AESL_done_delay2 <= AESL_done_delay;
  end
end
always @(posedge AESL_clock)
begin
    if(AESL_reset)
      interface_done = 0;
  else begin
      # 0.01;
      if(ready === 1 && ready_cnt > 0 && ready_cnt < AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else if(AESL_done_delay === 1 && done_cnt == AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else
          interface_done = 0;
  end
end

reg dump_tvout_finish_C;

initial begin : dump_tvout_runtime_sign_C
    integer fp;
    dump_tvout_finish_C = 0;
    fp = $fopen(`AUTOTB_TVOUT_C_out_wrapc, "w");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_C_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait (done_cnt == AUTOTB_TRANSACTION_NUM);
    // last transaction is saved at negedge right after last done
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    @ (posedge AESL_clock);
    fp = $fopen(`AUTOTB_TVOUT_C_out_wrapc, "a");
    if (fp == 0) begin
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_C_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
    dump_tvout_finish_C = 1;
end


////////////////////////////////////////////
// progress and performance
////////////////////////////////////////////

task wait_start();
    while (~AESL_start) begin
        @ (posedge AESL_clock);
    end
endtask

reg [31:0] clk_cnt = 0;
reg AESL_ready_p1;

always @ (posedge AESL_clock) begin
    clk_cnt <= clk_cnt + 1;
    AESL_ready_p1 <= AESL_ready;
end

reg [31:0] start_timestamp [0:AUTOTB_TRANSACTION_NUM - 1];
reg [31:0] start_cnt;
reg [31:0] finish_timestamp [0:AUTOTB_TRANSACTION_NUM - 1];
reg [31:0] finish_cnt;
event report_progress;

initial begin
    start_cnt = 0;
    finish_cnt = 0;
    wait (AESL_reset == 0);
    wait_start();
    start_timestamp[start_cnt] = clk_cnt;
    start_cnt = start_cnt + 1;
    if (AESL_done) begin
        finish_timestamp[finish_cnt] = clk_cnt;
        finish_cnt = finish_cnt + 1;
    end
    -> report_progress;
    forever begin
        @ (posedge AESL_clock);
        if (start_cnt < AUTOTB_TRANSACTION_NUM) begin
            if (AESL_start && AESL_ready_p1) begin
                start_timestamp[start_cnt] = clk_cnt;
                start_cnt = start_cnt + 1;
            end
        end
        if (finish_cnt < AUTOTB_TRANSACTION_NUM) begin
            if (AESL_done) begin
                finish_timestamp[finish_cnt] = clk_cnt;
                finish_cnt = finish_cnt + 1;
            end
        end
        -> report_progress;
    end
end

reg [31:0] progress_timeout;

initial begin
    wait (AESL_reset == 0);
    progress_timeout = PROGRESS_TIMEOUT;
    $display("////////////////////////////////////////////////////////////////////////////////////");
    $display("// Inter-Transaction Progress: Completed Transaction / Total Transaction");
    $display("// Intra-Transaction Progress: Measured Latency / Latency Estimation * 100%%");
    $display("////////////////////////////////////////////////////////////////////////////////////");
    print_progress();
    while (finish_cnt < AUTOTB_TRANSACTION_NUM) begin
        @ (report_progress);
        if (finish_cnt < AUTOTB_TRANSACTION_NUM) begin
                if (progress_timeout == 0) begin
                    print_progress();
                    progress_timeout = PROGRESS_TIMEOUT;
                end else begin
                    progress_timeout = progress_timeout - 1;
                end
        end
    end
    print_progress();
    $display("////////////////////////////////////////////////////////////////////////////////////");
    calculate_performance();
end

task print_progress();
    real intra_progress;
    begin
        if (LATENCY_ESTIMATION > 0) begin
            if (start_cnt > finish_cnt) begin
                intra_progress = clk_cnt - start_timestamp[finish_cnt];
            end else begin
                intra_progress = 0;
            end
            intra_progress = intra_progress / LATENCY_ESTIMATION * 100;
            $display("// RTL Simulation : %0d / %0d [%2.2f%%] @ \"%0t\"", finish_cnt, AUTOTB_TRANSACTION_NUM, intra_progress, $time);
        end else begin
            $display("// RTL Simulation : %0d / %0d [N/A] @ \"%0t\"", finish_cnt, AUTOTB_TRANSACTION_NUM, $time);
        end
    end
endtask

task calculate_performance();
    integer i;
    integer fp;
    reg [31:0] latency [0:AUTOTB_TRANSACTION_NUM - 1];
    reg [31:0] latency_min;
    reg [31:0] latency_max;
    reg [31:0] latency_total;
    reg [31:0] latency_average;
    reg [31:0] interval [0:AUTOTB_TRANSACTION_NUM - 2];
    reg [31:0] interval_min;
    reg [31:0] interval_max;
    reg [31:0] interval_total;
    reg [31:0] interval_average;
    begin
        latency_min = -1;
        latency_max = 0;
        latency_total = 0;
        interval_min = -1;
        interval_max = 0;
        interval_total = 0;

        for (i = 0; i < AUTOTB_TRANSACTION_NUM; i = i + 1) begin
            // calculate latency
            latency[i] = finish_timestamp[i] - start_timestamp[i];
            if (latency[i] > latency_max) latency_max = latency[i];
            if (latency[i] < latency_min) latency_min = latency[i];
            latency_total = latency_total + latency[i];
            // calculate interval
            if (AUTOTB_TRANSACTION_NUM == 1) begin
                interval[i] = 0;
                interval_max = 0;
                interval_min = 0;
                interval_total = 0;
            end else if (i < AUTOTB_TRANSACTION_NUM - 1) begin
                interval[i] = start_timestamp[i + 1] - start_timestamp[i];
                if (interval[i] > interval_max) interval_max = interval[i];
                if (interval[i] < interval_min) interval_min = interval[i];
                interval_total = interval_total + interval[i];
            end
        end

        latency_average = latency_total / AUTOTB_TRANSACTION_NUM;
        interval_average = interval_total / (AUTOTB_TRANSACTION_NUM - 1);

        fp = $fopen(`AUTOTB_LAT_RESULT_FILE, "w");

        $fdisplay(fp, "$MAX_LATENCY = \"%0d\"", latency_max);
        $fdisplay(fp, "$MIN_LATENCY = \"%0d\"", latency_min);
        $fdisplay(fp, "$AVER_LATENCY = \"%0d\"", latency_average);
        $fdisplay(fp, "$MAX_THROUGHPUT = \"%0d\"", interval_max);
        $fdisplay(fp, "$MIN_THROUGHPUT = \"%0d\"", interval_min);
        $fdisplay(fp, "$AVER_THROUGHPUT = \"%0d\"", interval_average);

        $fclose(fp);

        fp = $fopen(`AUTOTB_PER_RESULT_TRANS_FILE, "w");

        $fdisplay(fp, "%20s%16s%16s", "", "latency", "interval");
        if (AUTOTB_TRANSACTION_NUM == 1) begin
            i = 0;
            $fdisplay(fp, "transaction%8d:%16d%16d", i, latency[i], interval[i]);
        end else begin
            for (i = 0; i < AUTOTB_TRANSACTION_NUM; i = i + 1) begin
                if (i < AUTOTB_TRANSACTION_NUM - 1) begin
                    $fdisplay(fp, "transaction%8d:%16d%16d", i, latency[i], interval[i]);
                end else begin
                    $fdisplay(fp, "transaction%8d:%16d               x", i, latency[i]);
                end
            end
        end

        $fclose(fp);
    end
endtask


endmodule
